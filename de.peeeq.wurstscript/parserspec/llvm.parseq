package de.peeeq.wurstscript.llvm.ast


abstract syntax:



Prog(TypeDefList typeDefs,
    GlobalList globals,
    ProcList procedures)

Global(ref Type type, String name, boolean isConstant, InitialValue initialValue)

InitialValue = Const | External()

Variable =
      Parameter(ref Type type, String name)
    | TemporaryVar(String name)

Proc(String name,
    boolean isExtern,
    ref Type returnType,
    ParameterList parameters,
    BasicBlockList basicBlocks)

// a BasicBlock is a list of instructions
BasicBlock * Instruction


// instructions:
Instruction =
      Assign(TemporaryVar var, ValueInstruction valueInstruction)
    | TerminatingInstruction
    | Print(Operand e)
    | Store(Operand address, Operand value)
    | CallVoid(Operand function, OperandList arguments)
    | CommentInstr(String text)

ValueInstruction =
      Alloc(Operand sizeInBytes)
    | Alloca(ref Type type)
    | BinaryOperation(Operand left,
            Operator operator, Operand right)
    | Bitcast(ref Type type, Operand expr)
    | Call(Operand function, OperandList arguments)
    | GetElementPtr(Operand baseAddress,
            OperandList indices)
    | Load(Operand address)
    | PhiNode(ref Type type, PhiNodeChoiceList choices)

Operator = Add() | Sub() | Mul() | Sdiv() | Srem() | And() | Or() | Xor() | Eq() | Slt() | Sle() | Sgt() | Sge() | NotEq()
         | Frem() | Fdiv() | Fsub() | Fadd() | Fmul()
         // shift operators
         | Shl()

PhiNodeChoice(ref BasicBlock label, Operand value)

// terminating instructions:
TerminatingInstruction =
      Branch(Operand condition, ref BasicBlock ifTrueLabel,
            ref BasicBlock ifFalseLabel)
    | Jump(ref BasicBlock label)
    | ReturnExpr(Operand returnValue)
    | ReturnVoid()
    | HaltWithError(String msg)

// operands:
Operand =
      Const
    | VarRef(ref Variable variable)

Const =
      ConstBool(boolean boolVal)
    | ConstInt(int intVal)
    | GlobalRef(ref GlobalDef global)
    | ProcedureRef(ref Proc procedure)
    | Nullpointer()
    | Sizeof(ref TypeDef structType)
    | ConstStruct(ref TypeDef structType, ConstList values)
    | ConstString(String stringVal)

GlobalDef = Global | Proc

// types:
Type =
      TypeArray(ref Type of, int size)
    | TypeBool()
    | TypeByte()
    | TypeInt()
    | TypePointer(ref Type to)
    | TypeNullpointer()
    | TypeProc(TypeRefList argTypes, ref Type resultType)
    | TypeVoid()
    | TypeRef(ref TypeDef typeDef)

TypeDef(String name, boolean opaque, StructFieldList fields)



StructField(ref Type type, String name)


// lists:
TypeDefList * TypeDef
GlobalList * Global
ProcList * Proc
ParameterList * Parameter
ConstList * Const
StructFieldList * StructField
TypeRefList * ref Type
BasicBlockList * BasicBlock
PhiNodeList * PhiNode
PhiNodeChoiceList * PhiNodeChoice
InstructionList * Instruction
OperandList * Operand

// elements with name:
ElementWithName = GlobalDef | Variable | TypeDef

attributes:

Element.toString()
	returns String
	implemented by de.peeeq.wurstscript.llvm.printer.PrettyPrinter.elementToString

Operand.calculateType()
    returns Type
    implemented by de.peeeq.wurstscript.llvm.analysis.Typechecker.calculateType

Variable.calculateType()
    returns Type
    implemented by de.peeeq.wurstscript.llvm.analysis.Typechecker.calculateType

"a name for this basic block"
String BasicBlock.name

BasicBlock.getPhiNodes()
    "returns the phi node instructions at the beginning of the basic block"
    returns java.util.List<PhiNode>
    implemented by de.peeeq.wurstscript.llvm.analysis.BasicBlocks.getPhiNodes

BasicBlock.getTerminatingInstruction()
    "returns the final terminating instruction of the basic block if any"
    returns java.util.Optional<TerminatingInstruction>
    implemented by de.peeeq.wurstscript.llvm.analysis.BasicBlocks.getTerminatingInstruction


Type.equalsType(Type other)
    "checks, whether this type is equal to another type"
    returns boolean
    implemented by de.peeeq.wurstscript.llvm.analysis.Typechecker.equalsType