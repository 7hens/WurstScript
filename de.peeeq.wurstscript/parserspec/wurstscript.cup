package de.peeeq.wurstscript.parser;

import java_cup.runtime.*;
import de.peeeq.wurstscript.ast.*;
import java.util.*;
import com.google.common.collect.Lists;
import de.peeeq.wurstscript.attributes.ErrorHandler;

action code {: 

	public ErrorHandler errorHandler;


	private WPos pos(int left, int right) {
		return Ast.WPos(parser.filename, parser.scanner.lineStartOffsets, left, right);
	}
	
	private WPos pos(WPos left, WPos right) {
		return Ast.WPos(left.getFile(), left.getLineOffsets(), left.getLeftPos(), right.getRightPos());
	}
	
	private WPos pos(int left, WPos right) {
		return Ast.WPos(right.getFile(), right.getLineOffsets(), left, right.getRightPos());
	}
	
	private WPos pos(WPos left, int right) {
		return Ast.WPos(left.getFile(), left.getLineOffsets(), left.getLeftPos(), right);
	}
	
	private WPos pos(AstElementWithSource left, int right) {
		return pos(left.getSource(), right);
	}
	
	private WPos pos(AstElementWithSource left, AstElementWithSource right) {
		return pos(left.getSource(), right.getSource());
	}
	
	private WPos pos(int left, AstElementWithSource right) {
		return pos(left, right.getSource());
	}
	
	private final WPos pos(int left, List<? extends AstElementWithSource> ... right) {
		for (int i = right.length-1; i>=0; i--) {
			if (right[i].size() > 0) {
				return pos(left, right[i].get(right[i].size()-1));
			}
		}
		return pos(left, left+1);
	}

:};

parser code {: 
	protected String filename = "";
	protected WurstScriptScanner scanner;
:};

terminal Integer INTEGER_LITERAL;
terminal String IDENTIFIER, IDENTIFIER_LT;
terminal String ANNOTATION;
terminal String STRING_LITERAL;
terminal String REAL_LITERAL;
terminal 
	CUSTOM_ERROR,
	TRUE, FALSE, 
	EQEQ, GTEQ, LTEQ, NOTEQ, GT, LT,
	EQ, PLUS_EQ, MINUS_EQ, MULT_EQ, PLUS_PLUS, MINUS_MINUS, DIV_EQ, 
	AND, OR, NOT,
	PLUS, MINUS, UMINUS, 
	MULT, DIV_REAL, DIV_INT, MOD_REAL, MOD_INT,
	DOT, 
	LPAR, RPAR, 
	LSQUARE, RSQUARE,
	INDENT, UNINDENT,
	LBRACK, RBRACK, 
	COMMA, SEMICOLON, COLON,   
	NL,
	TUPLE, MODULE, USE, ABSTRACT, IN, FOR, FROM, TO, DOWNTO, STEP, BREAK,
	THISTYPE, ARROW, IT, IMMUTABLE, OVERRIDE, INSTANCE, INSTANCEOF, ENUM,
	STATIC, PACKAGE, ENDPACKAGE, RETURNS,FUNCTION, SKIP, LET, VAR, PUBLIC,
	PUBLICREAD, PRIVATE, PROTECTED, IMPORT, NATIVETYPE, INIT, NATIVE, 
	INTERFACE, IMPLEMENTS, ARRAY, IF, ELSE, WHILE, RETURN, CLASS, NEW, NULL,
	EXTENDS, SUPER, THIS, CONSTRUCT, ONDESTROY, SWITCH, CASE, DEFAULT,
	TYPE, GLOBALS, ENDGLOBALS, CONSTANT, ENDFUNCTION, TAKES, NOTHING, LOCAL,
	LOOP, ENDLOOP, EXITWHEN, SET, CALL, THEN, ELSEIF, ENDIF, DESTROY, CASTTO,
	// virtual terminals:
	INFIX_CALL, LOWEST
	;


// non terminal <ReturnType> <RuleName>
non terminal Arguments ArgumentRest;
non terminal Arguments Arguments;
non terminal ClassDef ClassDef;
non terminal ClassSlot ClassSlot;
non terminal CompilationUnit CompilationUnit;
non terminal EnumDef EnumDef;
non terminal EnumMembers EnumMembers;
non terminal ExprBinary ExprBinary;
non terminal ExprCast ExprCast;
non terminal Expr Expr;
non terminal Expr ExprAtomic;
non terminal ExprFunctionCall ExprFunctionCall;
non terminal ExprMemberArrayVar ExprMemberArrayVar;
non terminal ExprMemberMethod ExprMemberMethod;
non terminal ExprMemberVar ExprMemberVar;
non terminal ExprNewObject ExprNewObject;
non terminal ExprUnary ExprUnary;
non terminal ExprVarAccess ExprVarAccess;
non terminal ExprVarArrayAccess ExprVarArrayAccess;
non terminal FuncDef FuncDef;
non terminal FuncDef InterfaceFunctionSignature;
non terminal FuncDef JassFuncDef;
non terminal FuncSignature FuncSignature;
non terminal FuncSignature JassFuncSignature;
non terminal GlobalVarDef JassGlobalDecl;
non terminal GlobalVarDef VarDef;
non terminal IdentifierWithTypeArgs IdentifierWithTypeArgs;
non terminal IdentifierWithTypeParamDefs IdentifierWithTypeParamDefs;
non terminal Indexes Indexes;
non terminal InterfaceDef InterfaceDef;
non terminal JassGlobalBlock JassGlobalBlock;
non terminal JassGlobalBlock JassGlobalDecls;
non terminal JassToplevelDeclaration JassToplevelDeclaration;
non terminal List<ClassSlot> ClassSlots;
non terminal List<FuncDef> InterfaceFunctionSignatures;
non terminal LocalVarDef LocalVarDef;
non terminal LocalVarDef LocalVarDefInline;
non terminal Modifier Modifier;
non terminal Modifiers Modifiers;
non terminal ModuleDef ModuleDef;
non terminal NameRef ExprAssignable;
non terminal NativeFunc JassNativeDecl;
non terminal NativeType JassTypeDecl;
non terminal Newlines;
non terminal StmtCall StmtCall;
non terminal StmtDestroy StmtDestroy;
non terminal StmtIf StmtIf;
non terminal StmtReturn StmtReturn;
non terminal StmtSet StmtSet;
non terminal StmtWhile StmtWhile;
non terminal SwitchCases SwitchCases;
non terminal SwitchDefaultCase SwitchDefaultCase;
non terminal SwitchStmt SwitchStmt;
non terminal TopLevelDeclaration TopLevelDeclaration;
non terminal TypeExprList ExtendsList;
non terminal TypeExprList ExtendsListOpt;
non terminal TypeExprList ImplementsList;
non terminal TypeExprList ImplementsListOpt;
non terminal TypeExprList TypeExprList;
non terminal TypeExprList TypeParamList;
non terminal TypeExpr TypeExpr;
non terminal TypeParamDefs TypeParamDefList;
non terminal WEntities Entities;
non terminal WEntity Entity;
non terminal WImport Import;
non terminal WImports Imports;
non terminal WPackage PackageDeclaration;
non terminal WParameter Parameter;
non terminal WParameter ParameterNotConstant;
non terminal WParameters JassParameters;
non terminal WParameters OtherParameters;
non terminal WParameters OtherParametersNotConstant;
non terminal WParameters Parameters;
non terminal WParameters ParametersNotConstant;
non terminal WStatement JassLocal;
non terminal WStatement JassStatement;
non terminal WStatement JassStatementIf;
non terminal WStatement Statement;
non terminal WStatements ElseStatements;
non terminal WStatements JassLocals;
non terminal WStatements JassStatements;
non terminal WStatements JasselseIfs;
non terminal WStatements Statements;

precedence nonassoc LOWEST;
precedence left 	INFIX_CALL;
precedence left		OR;
precedence left		AND;
precedence left 	NOT;
precedence nonassoc EQEQ, GTEQ, LTEQ, EQ, NOTEQ;
precedence right 	GT, LT;
precedence left     PLUS,MINUS;
precedence left     MULT, DIV_REAL, DIV_INT, MOD_REAL, MOD_INT;
precedence left		UMINUS;
precedence right    DOT;
precedence left 	NL;
precedence right	NEW;
precedence right	CASTTO, INSTANCEOF;



start with CompilationUnit;

// zero or more newlines
Newlines ::= 
	  NL Newlines 
	| 
;

// one file = 1 or more packages
CompilationUnit ::=
	Newlines TopLevelDeclaration:p CompilationUnit:c
		{: RESULT = AstHelper.addFront(c, p); :}
	| Newlines PACKAGE:x IDENTIFIER:name NL Imports:imports	Entities:entities
		{: RESULT = Ast.CompilationUnit("", errorHandler, Ast.JassToplevelDeclarations(), Ast.WPackages(Ast.WPackage(pos(xleft, imports, entities), Ast.Modifiers(), name, imports, entities))); :}
	| Newlines
		{: RESULT = Ast.CompilationUnit("", errorHandler, Ast.JassToplevelDeclarations(), Ast.WPackages()); :}
;


TopLevelDeclaration ::=
	  PackageDeclaration:x
		{: RESULT = x; :}
	| JassToplevelDeclaration:x
		{: RESULT = x; :}
;





// a package
PackageDeclaration ::=
		PACKAGE:x IDENTIFIER:name NL INDENT
			Imports:imports
			Entities:entities
		UNINDENT ENDPACKAGE:y
		{: RESULT = Ast.WPackage(pos(xleft, yright), Ast.Modifiers(), name, imports, entities); :}
		| PACKAGE:x IDENTIFIER:name NL ENDPACKAGE:y
		{: RESULT = Ast.WPackage(pos(xleft, yright), Ast.Modifiers(), name, Ast.WImports(), Ast.WEntities()); :}
		
;		
		
// 0 or more imports		
Imports ::=
	  Newlines Import:i Imports:imports 
	  	{: imports.addFront(i); RESULT = imports; :} 		
	| Newlines
		{: RESULT = Ast.WImports(); :}
;

Import ::=
	IMPORT:x IDENTIFIER:i NL
		{: RESULT = Ast.WImport(pos(xleft, iright), false, i); :}
	| IMPORT:x PUBLIC IDENTIFIER:i NL
		{: RESULT = Ast.WImport(pos(xleft, iright), true, i); :}

;


Entities ::=
	  Newlines Entity:x Entities:xs
	  	{: xs.addFront(x); RESULT = xs; :}
	| Newlines
		{: RESULT = Ast.WEntities(); :}
;

Entity ::=
	Modifiers:mod NATIVETYPE:x IDENTIFIER:name EXTENDS TypeExpr:extendsName NL
		{: RESULT = Ast.NativeType(pos(xleft, extendsName), mod, name, extendsName); :}
	| Modifiers:mod NATIVETYPE:x IDENTIFIER:name NL
		{: RESULT = Ast.NativeType(pos(xleft, nameright), mod, name, Ast.NoTypeExpr()); :}
	| FuncDef:x
		{: RESULT = x; :}
	| VarDef:x
		{: RESULT = x; :}
	| INIT:x NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.InitBlock(pos(xleft, body), body); :}
	| NATIVE:x FuncSignature:sig NL
		{: RESULT = Ast.NativeFunc(pos(xleft, sig), Ast.Modifiers(), sig.getName(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy()); :}
	| ClassDef:x
		{: RESULT = x; :}
	| EnumDef:x
		{: RESULT = x; :}
	| ModuleDef:x
		{: RESULT = x; :}
	| InterfaceDef:x
		{: RESULT = x; :}
	| Modifiers:mod TUPLE:x IDENTIFIER:name LPAR ParametersNotConstant:parameters RPAR:y NL
		{: RESULT = Ast.TupleDef(pos(xleft, yright), mod, name, parameters, Ast.NoTypeExpr()); :}
	| Modifiers:mod FUNCTION:x TypeExpr:t DOT FuncSignature:sig NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.ExtensionFuncDef(pos(xleft, body), mod, t, sig.getName(), sig.getTypeParameters().copy(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy(), body); :}
	| error:x 
		{: RESULT = Ast.InitBlock(pos(xleft, xright), Ast.WStatements(Ast.StmtErr(pos(xleft, xright)))); :} // TODO error entity
;		


InterfaceDef ::=
	Modifiers:mod INTERFACE:x IdentifierWithTypeParamDefs:d ExtendsListOpt:el NL INDENT ClassSlots:slots UNINDENT:y
		{: RESULT = AstHelper.InterfaceDef(pos(xleft, slots), mod, d.getName(), d.getTypeParams(), el, slots); :}
;

ExtendsList ::= 
	EXTENDS TypeExpr:e
		{: RESULT = Ast.TypeExprList(e); :}
	| ExtendsList:el COMMA TypeExpr:e
		{: el.add(e); RESULT = el; :}
;


ExtendsListOpt ::=
	ExtendsList:x
		{: RESULT = x; :}
	| 
		{: RESULT = Ast.TypeExprList(); :}
;

ImplementsList ::= 
	IMPLEMENTS TypeExpr:e
		{: RESULT = Ast.TypeExprList(e); :}
	| ExtendsList:el COMMA TypeExpr:e
		{: el.add(e); RESULT = el; :}
;

ImplementsListOpt ::=
	ImplementsList:x
		{: RESULT = x; :}
	| 
		{: RESULT = Ast.TypeExprList(); :}
;

InterfaceFunctionSignatures ::=
	Newlines InterfaceFunctionSignature:x InterfaceFunctionSignatures:xs
		{: xs.add(0, x); RESULT = xs; :}
	| Newlines
		{: RESULT = Lists.newLinkedList();  :}
;

InterfaceFunctionSignature ::= 
	FUNCTION:x FuncSignature:sig NL
		{: RESULT = Ast.FuncDef(pos(xleft, sig), Ast.Modifiers(Ast.ModAbstract(pos(xleft, xright))), sig.getName()
					, sig.getTypeParameters().copy(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy(), Ast.WStatements()); :}
;



ClassDef ::=
	Modifiers:mod CLASS:x IdentifierWithTypeParamDefs:d EXTENDS TypeExpr:ex ImplementsListOpt:il NL INDENT ClassSlots:slots UNINDENT:y
		{: RESULT = AstHelper.ClassDef(pos(xleft, slots), mod, d.getName(), d.getTypeParams(), ex, il, slots); :}
	| Modifiers:mod CLASS:x IdentifierWithTypeParamDefs:d EXTENDS TypeExpr:ex ImplementsListOpt:il NL:y
		{: RESULT = AstHelper.ClassDef(pos(xleft, yright), mod, d.getName(), d.getTypeParams(), ex, il, Collections.<ClassSlot>emptyList()); :}
	| Modifiers:mod CLASS:x IdentifierWithTypeParamDefs:d ImplementsListOpt:il NL INDENT ClassSlots:slots UNINDENT:y
		{: RESULT = AstHelper.ClassDef(pos(xleft, slots), mod, d.getName(), d.getTypeParams(), Ast.NoTypeExpr(), il, slots); :}
	| Modifiers:mod CLASS:x IdentifierWithTypeParamDefs:d ImplementsListOpt:il NL:y
		{: RESULT = AstHelper.ClassDef(pos(xleft, yright), mod, d.getName(), d.getTypeParams(), Ast.NoTypeExpr(), il, Collections.<ClassSlot>emptyList()); :}
;

EnumDef ::=
	Modifiers:mod ENUM:x IDENTIFIER:name NL INDENT EnumMembers:membs UNINDENT:y
		{: RESULT = Ast.EnumDef(pos(xleft, yright), mod, name, membs ); :}
;

EnumMembers ::=
	Newlines IDENTIFIER:id EnumMembers:members
		{: members.addFront( Ast.EnumMember( pos(idleft,idright), Ast.Modifiers(), id )); RESULT = members;  :}
	| Newlines
		{: RESULT = Ast.EnumMembers(); :}
;



IdentifierWithTypeArgs ::=
	  IDENTIFIER_LT:name TypeParamList:l GT:y
	  	{: RESULT = Ast.IdentifierWithTypeArgs(pos(nameleft, yright), name, l); :}
	| IDENTIFIER:name
		{: RESULT = Ast.IdentifierWithTypeArgs(pos(nameleft, nameright), name, Ast.TypeExprList()); :}
;

TypeParamList ::=
	TypeExpr:e COMMA TypeParamList:l
		{: l.addFront(e); RESULT = l; :}
	| TypeExpr:e
		{: RESULT = Ast.TypeExprList(e); :}
;

IdentifierWithTypeParamDefs ::=
	IDENTIFIER_LT:x TypeParamList:p GT:y
	  	{: RESULT = Ast.IdentifierWithTypeParamDefs(pos(xleft, yright), x, AstHelper.transformTypeExprListToTyppeParamDefs(p)); :}
	| IDENTIFIER:x
		{: RESULT = Ast.IdentifierWithTypeParamDefs(pos(xleft, xright), x, Ast.TypeParamDefs()); :}
;





ModuleDef ::=
	Modifiers:mod MODULE:x IdentifierWithTypeParamDefs:d NL INDENT ClassSlots:slots UNINDENT:y
		{: RESULT = AstHelper.ModuleDef(pos(xleft, slots), mod, d.getName(), d.getTypeParams(), slots); :}
;

ClassSlots ::=
	Newlines ClassSlot:x ClassSlots:xs
		{: xs.add(0, x); RESULT = xs; :}
	| Newlines
		{: RESULT = Lists.newLinkedList(); :}
;

ClassSlot ::=
	  Modifiers:mod CONSTRUCT:x LPAR Parameters:params RPAR NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.ConstructorDef(pos(xleft, body), mod, params, AstHelper.inferSuperArgs(params), body); :}
	| Modifiers:mod CONSTRUCT:x LPAR Parameters:params RPAR NL INDENT Newlines SUPER LPAR Arguments:superArgs RPAR NL Statements:body UNINDENT:y
		{: RESULT = Ast.ConstructorDef(pos(xleft, yright), mod, params, superArgs, body); :}
	| Modifiers:mod USE:x IdentifierWithTypeArgs:m NL
		{: RESULT = Ast.ModuleUse(pos(xleft, m), m.getName(), m.getTypeArgs()); :} 
	| ONDESTROY:x NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.OnDestroyDef(pos(xleft, body), body); :}
	| VarDef:x
		{: RESULT = x; :}
	| FuncDef:x
		{: RESULT = x; :} 
;

FuncDef ::=
	  Modifiers:mod FUNCTION:x FuncSignature:sig NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.FuncDef(pos(xleft, body), mod, sig.getName(), sig.getTypeParameters().copy(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy(), body); :}
	| Modifiers:mod FUNCTION:x FuncSignature:sig NL
		{: RESULT = Ast.FuncDef(pos(xleft, sig), mod, sig.getName(), sig.getTypeParameters().copy(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy(), Ast.WStatements()); :}
;

Modifiers ::=
	  Modifier:x Modifiers:xs
	  	{: xs.addFront(x); RESULT = xs; :}
	| 
		{: RESULT = Ast.Modifiers(); :} 
;

Modifier ::=
	PUBLIC:x
		{: RESULT = Ast.VisibilityPublic(pos(xleft, xright)); :}
	| PRIVATE:x
		{: RESULT = Ast.VisibilityPrivate(pos(xleft, xright)); :}
	| PROTECTED:x
		{: RESULT = Ast.VisibilityProtected(pos(xleft, xright)); :}
	| PUBLICREAD:x
		{: RESULT = Ast.VisibilityPublicread(pos(xleft, xright)); :}
	| STATIC:x
		{: RESULT = Ast.ModStatic(pos(xleft, xright)); :}
	| OVERRIDE:x
		{: RESULT = Ast.ModOverride(pos(xleft, xright)); :}
	| ABSTRACT:x
		{: RESULT = Ast.ModAbstract(pos(xleft, xright)); :}
	| ANNOTATION:x
		{: RESULT = Ast.Annotation(pos(xleft, xright), x); :}
;

FuncSignature ::=
	  IdentifierWithTypeParamDefs:d LPAR Parameters:parameters RPAR RETURNS TypeExpr:typ
		{: RESULT = Ast.FuncSignature(pos(d, typ), d.getName(), d.getTypeParams(), parameters, typ); :}
	| IdentifierWithTypeParamDefs:d LPAR Parameters:parameters RPAR:y
		{: RESULT = Ast.FuncSignature(pos(d, yright), d.getName(), d.getTypeParams(), parameters, Ast.NoTypeExpr()); :}
;

Parameters ::=
	Parameter:x OtherParameters:xs 
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.WParameters(); :}
;

OtherParameters ::=
	COMMA Parameter:x OtherParameters:xs 
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.WParameters(); :}
;


Parameter ::=
	TypeExpr:typ IDENTIFIER:name
		{: RESULT = Ast.WParameter(pos(typleft, nameright), Ast.Modifiers(Ast.ModConstant(pos(typleft, typleft))), typ, name); :}
;


ParametersNotConstant ::=
	ParameterNotConstant:x OtherParametersNotConstant:xs 
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.WParameters(); :}
;

OtherParametersNotConstant ::=
	COMMA ParameterNotConstant:x OtherParametersNotConstant:xs 
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.WParameters(); :}
;

ParameterNotConstant ::=
	TypeExpr:typ IDENTIFIER:name
		{: RESULT = Ast.WParameter(pos(typleft, nameright), Ast.Modifiers(), typ, name); :}
;

TypeExpr ::=
	IdentifierWithTypeArgs:n
		{: RESULT = Ast.TypeExprSimple(pos(n, n), n.getName(), n.getTypeArgs()); :}
	| TypeExpr:e ARRAY:y
		{: RESULT = Ast.TypeExprArray(pos(e, yright), e); :}
	| THISTYPE:x
		{: RESULT = Ast.TypeExprThis(pos(xleft, xright)); :}
;



/*
ArraySizes ::= 
	LSQUARE Expr:x RSQUARE ArraySizes:xs
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.ArraySizes(); :}
;
*/
VarDef ::=
	  Modifiers:mod TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.GlobalVarDef(pos(typleft, i), mod, typ, name, i); :}
	| Modifiers:mod VAR:v IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.GlobalVarDef(pos(vleft, i), mod, Ast.NoTypeExpr(), name, i); :}
	| Modifiers:mod CONSTANT:v TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: mod.add(Ast.ModConstant(pos(vleft, vright))); RESULT = Ast.GlobalVarDef(pos(vleft, i), mod, typ, name, i); :}
	| Modifiers:mod CONSTANT:v IDENTIFIER:name EQ Expr:i NL
		{: mod.add(Ast.ModConstant(pos(vleft, vright))); RESULT = Ast.GlobalVarDef(pos(vleft, i), mod, Ast.NoTypeExpr(), name, i); :}	
	| Modifiers:mod TypeExpr:typ IDENTIFIER:name NL
		{: RESULT = Ast.GlobalVarDef(pos(typleft, nameright), mod, typ, name, Ast.NoExpr()); :}
;

Statements ::=
	Newlines Statement:x Statements:xs
		{: xs.addFront(x); RESULT = xs; :}
	| Newlines
		{: RESULT = Ast.WStatements(); :}
;

Statement ::=
	StmtIf:x 
		{: RESULT = x; :}
	| StmtWhile:x
		{: RESULT = x; :} 
	| LocalVarDef:x
		{: RESULT = x; :} 
	| StmtSet:x
		{: RESULT = x; :}
	| StmtCall:x
		{: RESULT = x; :}
	| StmtReturn:x
		{: RESULT = x; :}
	| StmtDestroy:x
		{: RESULT = x; :} 
	| FOR:x LocalVarDefInline:loopVar EQ Expr:from TO Expr:to NL INDENT Statements:body UNINDENT:y
		{: loopVar.setInitialExpr(from); RESULT = Ast.StmtForRange(pos(xleft, body), loopVar, to, Ast.ExprIntVal(pos(to, Integer.MIN_VALUE), 1), body); :}
	| FOR:x LocalVarDefInline:loopVar EQ Expr:from TO Expr:to STEP Expr:step NL INDENT Statements:body UNINDENT:y
		{: loopVar.setInitialExpr(from); RESULT = Ast.StmtForRange(pos(xleft, body), loopVar, to, step, body); :}
	| FOR:x LocalVarDefInline:loopVar EQ Expr:from DOWNTO Expr:to NL INDENT Statements:body UNINDENT:y
		{: loopVar.setInitialExpr(from); RESULT = Ast.StmtForRangeDown(pos(xleft, body), loopVar, to, Ast.ExprIntVal(pos(to, Integer.MIN_VALUE), 1), body); :}
	| FOR:x LocalVarDefInline:loopVar EQ Expr:from DOWNTO Expr:to STEP Expr:step NL INDENT Statements:body UNINDENT:y
		{: loopVar.setInitialExpr(from); RESULT = Ast.StmtForRangeDown(pos(xleft, body), loopVar, to, step, body); :}
	| FOR:x LocalVarDefInline:loopVar IN Expr:in NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.StmtForIn(pos(xleft, body), loopVar, in, body); :}
	| FOR:x LocalVarDefInline:loopVar FROM Expr:in NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.StmtForFrom(pos(xleft, body), loopVar, in, body); :}
	| BREAK:x NL
		{: RESULT = Ast.StmtExitwhen(pos(xleft, xright), Ast.ExprBoolVal(pos(xleft, xright), true)); :}
	| SKIP:x NL
		{: RESULT = Ast.StmtSkip(pos(xleft, xright)); :}
	| Expr:left DOT:y NL
		{: RESULT = Ast.ExprMemberVar(pos(left,yright), left, ""); :}
	| error:x NL
		{: RESULT = Ast.StmtErr(pos(xleft, xright)); :}
	| SwitchStmt:x
		{: RESULT = x; :}
;

StmtDestroy ::=
	DESTROY:x Expr:e NL
		{: RESULT = Ast.StmtDestroy(pos(xleft, e), e); :}
;

StmtReturn ::=
	RETURN:x Expr:result NL
		{: RESULT = Ast.StmtReturn(pos(xleft, result), result); :}
	| RETURN:x NL
		{: RESULT = Ast.StmtReturn(pos(xleft, xright), Ast.NoExpr()); :}
;

StmtIf ::=
	IF:x Expr:cond NL INDENT Statements:thenStatements UNINDENT:y
		{: RESULT = Ast.StmtIf(pos(xleft, thenStatements), cond, thenStatements, Ast.WStatements()); :}
	| IF:x Expr:cond NL INDENT Statements:thenStatements UNINDENT ELSE:y ElseStatements:elseStatements
		{: RESULT = Ast.StmtIf(pos(xleft, elseStatements.get(elseStatements.size()-1)), cond, thenStatements, elseStatements); :}
;

SwitchCases ::=
	Newlines CASE:x Expr:expr NL INDENT Statements:stmts UNINDENT:y SwitchCases:cases
		{: cases.addFront( Ast.SwitchCase( pos(xleft,exprright), expr, stmts ) ); RESULT = cases; :}
	| Newlines
		{: RESULT = Ast.SwitchCases(); :} 
;

SwitchDefaultCase ::=
	DEFAULT:x NL INDENT Statements:stmts UNINDENT:y
		{: RESULT = Ast.SwitchDefaultCaseStatements(pos(xleft,xright), stmts ); :}
;

SwitchStmt ::=
	SWITCH:x Expr:expr NL INDENT SwitchCases:cases SwitchDefaultCase:defaultCase UNINDENT:y
		{: RESULT = Ast.SwitchStmt(pos(xleft,exprright), expr, cases, defaultCase ); :}
	| SWITCH:x Expr:expr NL INDENT SwitchCases:cases UNINDENT:y
		{: RESULT = Ast.SwitchStmt(pos(xleft,exprright), expr, cases, Ast.NoDefaultCase() ); :}
;


ElseStatements ::= 
	StmtIf:x 
		{: RESULT = Ast.WStatements(x); :}
	| NL INDENT Statements:x UNINDENT
		{: RESULT = x; :}
;

StmtWhile ::=
	WHILE:x Expr:cond NL INDENT Statements:body UNINDENT:y
		{: RESULT = Ast.StmtWhile(pos(xleft, body), cond, body); :}
;

LocalVarDef ::=
	LET:x IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, i), Ast.Modifiers(Ast.ModConstant(pos(xleft, xright))), Ast.NoTypeExpr(), name, i); :}
	| LET:x TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, i), Ast.Modifiers(Ast.ModConstant(pos(xleft, xright))), typ, name, i); :}
	| VAR:x IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, i), Ast.Modifiers(), Ast.NoTypeExpr(), name, i); :}
	| TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.LocalVarDef(pos(typleft, i), Ast.Modifiers(), typ, name, i); :}
	| TypeExpr:typ IDENTIFIER:name NL
		{: RESULT = Ast.LocalVarDef(pos(typleft, nameright), Ast.Modifiers(), typ, name, Ast.NoExpr()); :}
	| LET:x IDENTIFIER:name NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, nameright), Ast.Modifiers(Ast.ModConstant(pos(xleft, xright))), Ast.NoTypeExpr(), name, Ast.NoExpr()); :}
	| VAR:x IDENTIFIER:name NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, nameright), Ast.Modifiers(Ast.ModConstant(pos(xleft, xright))), Ast.NoTypeExpr(), name, Ast.NoExpr()); :}
;

LocalVarDefInline ::=
	TypeExpr:typ IDENTIFIER:name
		{: RESULT = Ast.LocalVarDef(pos(typleft, nameright), Ast.Modifiers(), typ, name, Ast.NoExpr()); :}
	| IDENTIFIER:name
		{: RESULT = Ast.LocalVarDef(pos(nameleft, nameright), Ast.Modifiers(), Ast.NoTypeExpr(), name, Ast.NoExpr()); :}
;

StmtSet ::= 
	  ExprAssignable:left EQ Expr:right NL
		{: RESULT = Ast.StmtSet(pos(left, right), left, right); :}
	| ExprAssignable:left PLUS_EQ Expr:right NL
		{: RESULT = Ast.StmtSet(pos(left, right), left, Ast.ExprBinary(pos(left, right), (Expr) left.copy(), Ast.OpPlus(), right)); :}
	| ExprAssignable:left MINUS_EQ Expr:right NL
		{: RESULT = Ast.StmtSet(pos(left, right), left, Ast.ExprBinary(pos(left, right), (Expr) left.copy(), Ast.OpMinus(), right)); :}
	| ExprAssignable:left MULT_EQ Expr:right NL
		{: RESULT = Ast.StmtSet(pos(left, right), left, Ast.ExprBinary(pos(left, right), (Expr) left.copy(), Ast.OpMult(), right)); :}
	| ExprAssignable:left DIV_EQ Expr:right NL
		{: RESULT = Ast.StmtSet(pos(left, right), left,  Ast.ExprBinary(pos(left, right), (Expr) left.copy(), Ast.OpDivReal(), right)); :}
	| ExprAssignable:left PLUS_PLUS:x NL
		{: RESULT = Ast.StmtSet(pos(left, xright), left, Ast.ExprBinary(pos(left, xright), (Expr) left.copy(), Ast.OpPlus(), Ast.ExprIntVal(pos(xleft, xright), 1))); :}
	| ExprAssignable:left MINUS_MINUS:x NL
		{: RESULT = Ast.StmtSet(pos(left, xright), left, Ast.ExprBinary(pos(left, xright), (Expr) left.copy(), Ast.OpMinus(), Ast.ExprIntVal(pos(xleft, xright), 1))); :}
	| ExprAssignable:left NL
		{: RESULT = Ast.StmtSet(pos(left, left), left, Ast.ExprIncomplete(pos(left, Integer.MIN_VALUE), "missing right side of expression")); :}
;

ExprAssignable ::=
	ExprMemberVar:x
		{: RESULT = x; :} 
	| ExprMemberArrayVar:x
		{: RESULT = x; :}
	| ExprVarAccess:x
		{: RESULT = x; :} 
	| ExprVarArrayAccess:x
		{: RESULT = x; :}
;

ExprVarAccess ::=
	IDENTIFIER:name
		{: RESULT = Ast.ExprVarAccess(pos(nameleft, nameright), name); :}
;

ExprVarArrayAccess ::=
	IDENTIFIER:name Indexes:indexes
		{: RESULT = Ast.ExprVarArrayAccess(pos(nameleft, indexes.get(indexes.size()-1)), name, indexes); :}
;


StmtCall ::=
	ExprMemberMethod:x NL
	  	{: RESULT = x; :} 
	| ExprFunctionCall:x NL
	  	{: RESULT = x; :} 
	| ExprNewObject:x NL
	  	{: RESULT = x; :}
;



Expr ::= 
	  ExprBinary:x
	  	{: RESULT = x; :}
	| ExprUnary:x
	  	{: RESULT = x; :}
	| ExprMemberVar:x
	  	{: RESULT = x; :}
	| ExprMemberArrayVar:x
		{: RESULT = x; :}
	| ExprMemberMethod:x
	  	{: RESULT = x; :}
	| ExprFunctionCall:x
	  	{: RESULT = x; :}
	| ExprNewObject:x
	  	{: RESULT = x; :}
	| ExprAtomic:x
	  	{: RESULT = x; :}
	| ExprCast:x
		{: RESULT = x; :}
	| Expr:e INSTANCEOF TypeExpr:t
		{: RESULT = Ast.ExprInstanceOf(pos(e,t), t, e); :}
	| Expr:left DOT:y
		{: RESULT = Ast.ExprMemberVar(pos(left,yright), left, ""); :}
	| SUPER:x
		{: RESULT = Ast.ExprSuper(pos(xleft, xright)); :}
;
	
	
ExprCast ::= 
	Expr:e CASTTO TypeExpr:t 
		{: RESULT = Ast.ExprCast(pos(e, t), t, e); :} 
;	
	
ExprMemberVar ::=
	Expr:left DOT IDENTIFIER:name
		{: RESULT = Ast.ExprMemberVar(pos(left,nameright), left, name); :}	
;

ExprMemberArrayVar ::=
	Expr:left DOT IDENTIFIER:name Indexes:indexes
		{: RESULT = Ast.ExprMemberArrayVar(pos(left, indexes.get(indexes.size()-1)), left, name, indexes); :}
;

ExprMemberMethod ::=
	Expr:left DOT IdentifierWithTypeArgs:n LPAR Arguments:args RPAR:y
		{: RESULT = Ast.ExprMemberMethod(pos(left, yright), left, n.getName(), n.getTypeArgs(), args); :}
;


ExprAtomic ::= 
	  INTEGER_LITERAL:i
		{: RESULT = Ast.ExprIntVal(pos(ileft, iright), i); :}
	| NULL:x
		{: RESULT = Ast.ExprNull(pos(xleft, xright)); :}
	| STRING_LITERAL:s
		{: RESULT = Ast.ExprStringVal(pos(sleft, sright), s); :}
	| LPAR Expr:e RPAR
		{: RESULT = e; :}
	| TRUE:x
		{: RESULT = Ast.ExprBoolVal(pos(xleft, xright), true); :} 
	| FALSE:x
		{: RESULT = Ast.ExprBoolVal(pos(xleft, xright), false); :}
	| THIS:x
		{: RESULT = Ast.ExprThis(pos(xleft, xright)); :}
	| FUNCTION:x IDENTIFIER:name
		{: RESULT = Ast.ExprFuncRef(pos(xleft, nameright), "", name); :}
	| FUNCTION:x IDENTIFIER:c DOT IDENTIFIER:name
		{: RESULT = Ast.ExprFuncRef(pos(xleft, nameright), c, name); :}
	| REAL_LITERAL:x
		{: RESULT = Ast.ExprRealVal(pos(xleft, xright), x); :}
	| ExprVarAccess:x
		{: RESULT = x; :} 
	| ExprVarArrayAccess:x
		{: RESULT = x; :}
;	

ExprNewObject ::=
 	NEW:x IdentifierWithTypeArgs:n LPAR Arguments:args RPAR:y
		{: RESULT = Ast.ExprNewObject(pos(xleft, yright), n.getName(), n.getTypeArgs(), args); :}
;

Indexes ::=
	LSQUARE Expr:x RSQUARE Indexes:xs
		{: xs.addFront(x); RESULT = xs; :}
	| LSQUARE Expr:x RSQUARE
		{: RESULT = Ast.Indexes(x); :}
;



Arguments ::=
	Expr:x ArgumentRest:xs
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.Arguments(); :}
;

ArgumentRest ::=
	COMMA Expr:x ArgumentRest:xs
		{: xs.addFront(x); RESULT = xs; :}
	|
		{: RESULT = Ast.Arguments(); :}
;



ExprBinary ::= 
	  Expr:left OR Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpOr(), right); :}
	| Expr:left AND Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpAnd(), right); :}
	| Expr:left PLUS Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpPlus(), right); :}
	| Expr:left MINUS Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpMinus(), right); :}
	| Expr:left MULT Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpMult(), right); :}
	| Expr:left DIV_REAL Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpDivReal(), right); :}
	| Expr:left DIV_INT Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpDivInt(), right); :}
	| Expr:left MOD_REAL Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpModReal(), right); :}
	| Expr:left MOD_INT Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpModInt(), right); :}
	| Expr:left EQEQ Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpEquals(), right); :}
	| Expr:left GTEQ Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpGreaterEq(), right); :}
	| Expr:left LTEQ Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpLessEq(), right); :}
	| Expr:left LT Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpLess(), right); :}
	| Expr:left GT Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpGreater(), right); :}
	| Expr:left NOTEQ Expr:right
		{: RESULT = Ast.ExprBinary(pos(left, right), left, Ast.OpUnequals(), right); :}
//	| Expr:left IDENTIFIER:f Expr:right 
//		{: RESULT = Ast.ExprFunctionCall(pos(left, right), f, Ast.TypeExprList(), Ast.Arguments(left, right)); :}
//		%prec INFIX_CALL
;

ExprUnary ::=
	NOT:x Expr:right
		{: RESULT = Ast.ExprUnary(pos(xleft, right), Ast.OpNot(), right); :}
	| MINUS:x Expr:right
		{: RESULT = Ast.ExprUnary(pos(xleft, right), Ast.OpMinus(), right); :}
;

ExprFunctionCall ::=
	IdentifierWithTypeArgs:n LPAR Arguments:args RPAR:y
		{: RESULT = Ast.ExprFunctionCall(pos(n, yright), n.getName(), n.getTypeArgs(), args); :}
;







// ++++++++++++++++
// Jass stuff:

JassToplevelDeclaration ::=
	  JassGlobalBlock:x 
		{: RESULT = x; :}
	| JassFuncDef:x
		{: RESULT = x; :}
	| JassTypeDecl:x
		{: RESULT = x; :}
	| JassNativeDecl:x
		{: RESULT = x; :}
;



JassTypeDecl ::=
	TYPE:x IDENTIFIER:name EXTENDS TypeExpr:extendsName NL
		{: RESULT = Ast.NativeType(pos(xleft, extendsName), Ast.Modifiers(), name, extendsName); :}
;


JassGlobalBlock ::=
	GLOBALS NL JassGlobalDecls:x ENDGLOBALS NL
		{: RESULT = x; :}
;

JassGlobalDecls ::=
	Newlines JassGlobalDecl:x JassGlobalDecls:xs
		{: xs.addFront(x); RESULT = xs; :}
	| Newlines 
		{: RESULT = Ast.JassGlobalBlock(); :}
;

JassGlobalDecl ::=
	CONSTANT:x TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.GlobalVarDef(pos(xleft, i), Ast.Modifiers(Ast.ModConstant(pos(xleft, xright))), typ, name, i); :}
	| TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.GlobalVarDef(pos(typ, i), Ast.Modifiers(), typ, name, i); :}
	| TypeExpr:typ IDENTIFIER:name NL
		{: RESULT = Ast.GlobalVarDef(pos(typ, nameright), Ast.Modifiers(), typ, name, Ast.NoExpr()); :}
;

JassNativeDecl ::=
	NATIVE:x JassFuncSignature:sig NL
		{: RESULT = Ast.NativeFunc(pos(xleft, sig), Ast.Modifiers(), sig.getName(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy()); :}
	| CONSTANT:x NATIVE JassFuncSignature:sig NL
		{: RESULT = Ast.NativeFunc(pos(xleft, sig), Ast.Modifiers(), sig.getName(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy()); :}
;

JassFuncDef ::=
	FUNCTION:x JassFuncSignature:sig NL JassLocals:body1 JassStatements:body2 ENDFUNCTION:y NL
		{: 
			body1.addAll(body2.removeAll());
			RESULT = Ast.FuncDef(pos(xleft, yright), Ast.Modifiers(), sig.getName(), sig.getTypeParameters().copy(), sig.getParameters().copy(), (OptTypeExpr) sig.getReturnTyp().copy(), body1); 
		:}
;


JassFuncSignature ::=
	IDENTIFIER:name TAKES JassParameters:parameters RETURNS TypeExpr:typ
		{: RESULT = Ast.FuncSignature(pos(nameleft, typ), name, Ast.TypeParamDefs(), parameters, typ); :}
	| IDENTIFIER:name TAKES JassParameters:parameters RETURNS NOTHING:y
		{: RESULT = Ast.FuncSignature(pos(nameleft, yright), name, Ast.TypeParamDefs(), parameters, Ast.NoTypeExpr()); :}
;

JassParameters ::=
	 NOTHING
		{: RESULT = Ast.WParameters(); :}
	| ParameterNotConstant:x OtherParametersNotConstant:xs 
		{: xs.addFront(x); RESULT = xs; :}   
;

JassLocals ::=
	  Newlines JassLocal:x JassLocals:xs
		{: xs.addFront(x); RESULT = xs; :}
	| Newlines 
		{: RESULT = Ast.WStatements(); :}
;

JassLocal ::=
	  LOCAL:x TypeExpr:typ IDENTIFIER:name EQ Expr:i NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, i), Ast.Modifiers(), typ, name, i); :}
	| LOCAL:x TypeExpr:typ IDENTIFIER:name NL
		{: RESULT = Ast.LocalVarDef(pos(xleft, nameright), Ast.Modifiers(), typ, name, Ast.NoExpr()); :}
;

JassStatements ::=
	Newlines JassStatement:x JassStatements:xs
		{: xs.addFront(x); RESULT = xs; :}
	| Newlines  
		{: RESULT = Ast.WStatements(); :}
;

JassStatement ::=
	  JassStatementIf:x
		{: RESULT = x; :}
	| LOOP:x NL JassStatements:body ENDLOOP:y NL
		{: RESULT = Ast.StmtLoop(pos(xleft, yright), body); :}
	| EXITWHEN:x Expr:e NL
		{: RESULT = Ast.StmtExitwhen(pos(xleft, e), e); :}
	| RETURN:x NL
		{: RESULT = Ast.StmtReturn(pos(xleft, xright), Ast.NoExpr()); :}
	| RETURN:x Expr:e NL
		{: RESULT = Ast.StmtReturn(pos(xleft, e), e); :}
	| SET:x ExprAssignable:left EQ Expr:right NL
		{: RESULT = Ast.StmtSet(pos(xleft, right), left, right); :}
	| CALL:x ExprFunctionCall:call
		{: RESULT = call; :}
;  


JassStatementIf ::=
	IF:x Expr:cond THEN:y NL JassStatements:thenStatements JasselseIfs:elseStatements
		{: 
			WPos pos;
			if (elseStatements.size() > 0) {
				pos = pos(xleft, elseStatements.get(elseStatements.size() - 1));
			} else {
				if (thenStatements.size() > 0) {
					pos = pos(xleft, thenStatements.get(thenStatements.size()-1));
				} else {
					pos = pos(xleft, yright);
				}
			}
			RESULT = Ast.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); :}
;

JasselseIfs ::=
	ELSEIF:x Expr:cond THEN NL JassStatements:thenStatements JasselseIfs:elseStatements
		{: RESULT = Ast.WStatements(Ast.StmtIf(pos(xleft, xright), cond,  thenStatements, elseStatements)); :}
	| ELSE NL JassStatements:s ENDIF NL 
		{: RESULT = s; :}
	| ENDIF NL
		{: RESULT = Ast.WStatements(); :}
;


