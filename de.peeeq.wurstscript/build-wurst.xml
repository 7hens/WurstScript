<project name="Wurst Compiler" default="compile" basedir=".">
	<property name="root" location="." />
	<property name="lib" location="./lib" />
	<property name="src" location="./src" />
	<property name="srcgen" location="./src-gen" />
	<property name="srctest" location="./src-test" />
	<property name="build" location="./bin" />
	<property name="instrumented.dir" location="./bin_instrumented" />
	<property name="grammarspec" location="./parserspec/wurstscript.cup" />
	<property name="scannerspec" location="./parserspec/wurstscript.flex" />
	<property name="jurst_grammarspec" location="./parserspec/jurst.cup" />
	<property name="jurst_scannerspec" location="./parserspec/jurst.flex" />
	<property name="grammarspec_antlr" location="./parserspec/Wurstscript.g" />
	<property name="scannerspec_antlr" location="./parserspec/wurstscript_antlr.flex" />
	<property name="javacup" location="./tools/java-cup.jar" />
	<property name="jflex" location="./tools/jflex.jar" />
	<property name="antlr" location="./tools/antlr-3.4-complete-no-antlrv2.jar" />
	<property name="parseqspec" location="./parserspec/wurstscript.parseq" />
	<property name="parseq" location="./tools/parseq.jar" />
	<property name="antlr4" location="./tools/antlr-4.2-complete.jar" />
	<property name="junitTestResults" location="./junitTestResults/" />
	<property name="hotDocLoc" location="${build}/hotdoc/" />
	<property name="antlr4wurstgrammar" location="./parserspec/Wurst.g4" />
	<property name="antlr4jurstgrammar" location="./parserspec/Jurst.g4" />

	<import file="build-generate-mvn.xml"/>
	
	
	<path id="classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	

	<target name="checkForChanges">
		<uptodate targetfile="${srcgen}/de/peeeq/wurstscript/parser/WurstScriptScannerIntern.java" srcfile="${scannerspec}" property="jflexNotChanged" />
		<uptodate targetfile="${srcgen}/de/peeeq/wurstscript/parser/parser.java" srcfile="${grammarspec}" property="cupNotChanged" />
		<uptodate targetfile="${srcgen}/de/peeeq/wurstscript/parser/jurstparser.java" srcfile="${jurst_grammarspec}" property="jurst_cupNotChanged" />
		<uptodate targetfile="${srcgen}/de/peeeq/wurstscript/parser/JurstScriptScannerIntern.java" srcfile="${jurst_scannerspec}" property="jurst_jflexNotChanged" />
	</target>

	
	<target name="antlr">
			<mkdir dir="${srcgen}/de/peeeq/wurstscript/parser" />
			<java jar="${antlr}" fork="true" failonerror="true">
				<arg value="-o" />
				<arg value="${srcgen}/de/peeeq/wurstscript/parser" />
				<arg value="${grammarspec_antlr}" />
			</java>
		</target>
	<target name="antlr_scanner">
		<java jar="${jflex}" fork="true" failonerror="true">
					<arg value="-d" />
					<arg value="${srcgen}/de/peeeq/wurstscript/parser" />
					<arg value="${scannerspec_antlr}" />
					<classpath refid="classpath" />
		</java>
	</target>

	<target name="cup" depends="checkForChanges" unless="cupNotChanged">
		<mkdir dir="${srcgen}/de/peeeq/wurstscript/parser" />
		<java jar="${javacup}" fork="true" failonerror="true">
			<!--<arg value="-expect" />
			<arg value="2" />-->
			<!--<arg value="-dump" />-->
			<arg value="-destdir" />
			<arg value="${srcgen}/de/peeeq/wurstscript/parser" />
			<arg value="-symbols" />
			<arg value="TokenType" />
			<arg value="${grammarspec}" />
		</java>
	</target>
	
	<target name="jurst_cup" depends="checkForChanges" unless="jurst_cupNotChanged">
		<mkdir dir="${srcgen}/de/peeeq/wurstscript/parser" />
		<java jar="${javacup}" fork="true" failonerror="true">
			<!--<arg value="-expect" />
			<arg value="2" />-->
			<!--<arg value="-dump" />-->
			<arg value="-destdir" />
			<arg value="${srcgen}/de/peeeq/wurstscript/parser" />
			<arg value="-symbols" />
			<arg value="JurstTokenType" />
			<arg value="-parser" />
			<arg value="JurstParser" />
			<arg value="${jurst_grammarspec}" />
		</java>
	</target>

	<target name="jflex" depends="cup, checkForChanges" unless="jflexNotChanged">
		<java jar="${jflex}" fork="true" failonerror="true">
			<arg value="-d" />
			<arg value="${srcgen}/de/peeeq/wurstscript/parser" />
			<arg value="${scannerspec}" />
			<classpath refid="classpath" />
		</java>
	</target>
	
	<target name="jurst_jflex" depends="jurst_cup, checkForChanges" unless="jurst_jflexNotChanged">
		<java jar="${jflex}" fork="true" failonerror="true">
			<arg value="-d" />
			<arg value="${srcgen}/de/peeeq/wurstscript/parser" />
			<arg value="${jurst_scannerspec}" />
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="parseq_ast">
		<java jar="${parseq}" fork="true" failonerror="true">
			<arg value="${parseqspec}" />
			<arg value="${srcgen}" />
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="parseq_jassAst">
		<java jar="${parseq}" fork="true" failonerror="true">
			<arg value="./parserspec/jass.parseq" />
			<arg value="${srcgen}" />
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="galaxy_jassAst">
		<java jar="${parseq}" fork="true" failonerror="true">
			<arg value="./parserspec/galaxy.parseq" />
			<arg value="${srcgen}" />
			<classpath refid="classpath" />
		</java>
	</target>
	
	
	<target name="parseq_jassImAst">
			<java jar="${parseq}" fork="true" failonerror="true">
				<arg value="./parserspec/jass_im.parseq" />
				<arg value="${srcgen}" />
				<classpath refid="classpath" />
			</java>
		</target>
	
	
	<target name="gen" depends="cup, jflex, jurst_cup, jurst_jflex, parseq_ast, parseq_jassAst, galaxy_jassAst, parseq_jassImAst, compiletimefile, wurst_antlr4, jurst_antlr4" >
	</target>
	
	<target name="compile" depends="gen, just_compile">
	</target>

	<target name="just_compile">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" includeantruntime="false" debug="true" debuglevel="vars,lines,source"
			encoding="UTF-8">
			<compilerarg value="-Xlint" />
			<compilerarg value="-Xmaxwarns" />
			<compilerarg value="100000" />

			<src path="${srcgen}" />
			<src path="${srctest}" />
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="clean">
		<delete dir="${build}" />
		<delete dir="${srcgen}" />
	</target>

	<path id="classpath.test">
		<pathelement location="${build}" />
		<pathelement location="${build_tests}" />
		<path refid="classpath" />
	</path>


	<property name="cobertura.dir" value="./lib/cobertura/" />

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<target name="junit_allTests">
		<mkdir dir="${junitTestResults}" />
		<junit printsummary="on">
			<classpath location="${build}" />
			<classpath refid="classpath.test">
			</classpath>
			<test name="tests.wurstscript.tests.AllTests" todir="${junitTestResults}">
						</test>
						<formatter type="xml" />
		</junit>
	</target>


	<target name="junit_allTests_withCobertura">

		<cobertura-instrument todir="${instrumented.dir}">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${build}">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
				<exclude name="**/*Tests.class" />
				<exclude name="**/ast/*.class" />
				<exclude name="**/jassAst/*.class" />
			</fileset>
		</cobertura-instrument>

		<mkdir dir="${junitTestResults}" />
		<junit printsummary="on">

			<sysproperty key="net.sourceforge.cobertura.datafile"
					file="${junitTestResults}/cobertura.ser" />
			
			<classpath location="${instrumented.dir}" />
			<classpath refid="classpath.test">
			</classpath>
			<classpath refid="cobertura.classpath" />
			<test name="de.peeeq.wurstscript.tests.AllTests" todir="${junitTestResults}">
			</test>
			<formatter type="xml" />
		</junit>


		<cobertura-report format="xml" destdir="${junitTestResults}" srcdir="${build}" />

	</target>
	
	<target name="generate_hotdoc">
		<java classpathref="classpath.test" classname="de.peeeq.wurstio.Main">
			<arg value="--hotdoc"/>		
			<arg value="./../Wurstpack/wurstscript/lib"/>
			<arg value="${hotDocLoc}"/>
		</java>		
	</target>

	
	<target name="wurst_antlr4">
		<java jar="${antlr4}" fork="true">
			<arg value="-o"/>
			<arg value="./src-gen/de/peeeq/wurstscript/antlr"/>
			<arg value="-no-listener"/>
			<arg value="-visitor"/>
			<arg value="-package"/>
			<arg value="de.peeeq.wurstscript.antlr"/>
			<arg value="${antlr4wurstgrammar}"/>
		</java>
	</target>
	
	<target name="jurst_antlr4">
			<java jar="${antlr4}" fork="true">
				<arg value="-o"/>
				<arg value="./src-gen/de/peeeq/wurstscript/jurst/antlr"/>
				<arg value="-no-listener"/>
				<arg value="-visitor"/>
				<arg value="-package"/>
				<arg value="de.peeeq.wurstscript.jurst.antlr"/>
				<arg value="${antlr4jurstgrammar}"/>
			</java>
		</target>
	
</project>
