//===========================================================================
// 
// Just another Warcraft III map
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Date: Tue Jun 12 15:20:33 2012
//   Map Author: Unknown
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    // Generated
    trigger                 gg_trg_Melee_Initialization = null
    trigger                 gg_trg_Vector3             = null
endglobals

function InitGlobals takes nothing returns nothing
endfunction

//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateUnitsForPlayer0 takes nothing returns nothing
    local player p = Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u = CreateUnit( p, 'Hblm', -111.2, 69.0, 134.488 )
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
    call CreateUnitsForPlayer0(  )
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreatePlayerBuildings(  )
    call CreatePlayerUnits(  )
endfunction

//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Melee Initialization
//
// Default melee game initialization for all players
//===========================================================================
//TESH.scrollpos=18
//TESH.alwaysfold=0
package Vectors
    
    public tuple vec3( real x, real y, real z )
    
    public function vec3.assign( real x, real y, real z )
        this.x = x
        this.y = y
        this.z = z
        
    public function vec3.add( vec3 v )
        this.x += v.x
        this.y += v.y
        this.z += v.z
    
    public function vec3.sub( vec3 v )
        this.x -= v.x
        this.y -= v.y
        this.z -= v.z
        
    public function vec3.scale( real factor )
        this.x *= factor
        this.y *= factor
        this.z *= factor
    
    public function vec3.scaleXY( real factor )
        this.x *= factor
        this.y *= factor
        
    function vec3.cross( vec3 v ) returns vec3
        return vec3( this.y*v.z-this.z*v.y, this.z*v.x-this.x*v.z, this.x*v.y-this.y*v.x ) 
        
    function vec3.dot( vec3 v ) returns real
        return this.x*v.x+this.y*v.y+this.z*v.z
    
    function vec3.trim( real value )
        if this.x > -value and this.x < value
            this.x = 0.
        if this.y > -value and this.y < value
            this.y = 0.
        if this.z > -value and this.z < value
            this.z = 0.
        
    public function vec3.length() returns real
        return SquareRoot(this.x*this.x+this.y*this.y+this.z*this.z)
        
    public function vec3.toString() returns string
        return "Vector3 [ " + this.x.toString() + ", " + this.y.toString() + ", " + this.z.toString() + " ]"
    
endpackage //===========================================================================
// Trigger: Vector3
//===========================================================================
//TESH.scrollpos=97
//TESH.alwaysfold=0
package Vector3

    /**
     * Defines a Vector for a three real value tuple.
     * Vector3 can represent any three dimensional value, such as a
     * vertex or normal.
     *
     * The functional methods like add, sub, multiply return new instances, and
     * leave this instance unchanged.
     *
     * Static methods store the resulting vector in a existing reference, which avoids
     * allocation and can improve performances around 20%
     *
     * @author Frotty 
     */
     public class Vector3
        // The x coordinate.
        real x
        // The y coordinate.
        real y
        // The z coordinate.
        real z            

        /**
         * Constructs and initializes a Vector3 to [0., 0., 0.]
         */
        construct()
            x = 0.
            y = 0.
            z = 0.

        /**
         * Constructs and initializes a Vector3 from the specified
         * xyz coordinates.
         */
        construct( real x, real y, real z) 
            this.x = x 
            this.y = y 
            this.z = z
        

        /**
         * Constructs and initializes a Vector3 with the coordinates
         * of the given Vector3.
         */
        construct( Vector3 v ) 
            x = v.x 
            y = v.y 
            z = v.z    
            
        /**
         * Adds a provided vector to this vector.
         */
        function add(Vector3 v)
            x += v.x
            y += v.y
            z += v.z
            
        function addReals(real x2, real y2, real z2)
            x += x2
            y += y2
            z += z2
            /**
         * Subtracts a provided vector to this vector.
         */
        function sub(Vector3 v)
            x -= v.x
            y -= v.y
            z -= v.z
            
        function scale(real factor)
            x *= factor
            y *= factor
            z *= factor
            
        function scaleXY(real factor)
            x *= factor
            y *= factor
            
        function trim()
            if x > -.4 and x < .4
                x = 0.
            if y > -.4 and y < .4
                y = 0.
            if z > -.4 and z < .4
                z = 0.

        function addNew(Vector3 v) returns Vector3 
            return new Vector3( x+v.x, y+v.y, z+v.z )
            
        function subNew( Vector3 v ) returns Vector3
            return new Vector3( x-v.x, y-v.y, z-v.z )
        
        function negate() returns Vector3 
            return new Vector3(-x,-y,-z)      

        

        static function addVectors( Vector3 v1, Vector3 v2 ) 
            v1.x += v2.x
            v1.y += v2.y
            v1.z += v2.z
        

        static function subVectors( Vector3 v1, Vector3 v2 ) 
            v1.x -= v2.x
            v1.y -= v2.y
            v1.z -= v2.z             


        function dot( Vector3 v ) returns real
            return this.x*v.x+this.y*v.y+this.z*v.z
        

        function xydot( Vector3 v ) returns real
            return this.x*v.x+this.y*v.y
        


        function cross( Vector3 v ) returns Vector3
            return new Vector3( y*v.z-z*v.y, z*v.x-x*v.z, x*v.y-y*v.x ) 
        

        function crossProduct( Vector3 v1, Vector3 v2, Vector3 result ) 
            real tempa1 = v1.y*v2.z-v1.z*v2.y
            real tempa2 = v1.z*v2.x-v1.x*v2.z
            real tempa3 = v1.x*v2.y-v1.y*v2.x

            result.x = tempa1
            result.y = tempa2
            result.z = tempa3
        

        function normalize() returns Vector3
            real l = SquareRoot(x*x+y*y+z*z)
            if ( l == 0.0 ) 
                return new Vector3(1.,0.,0.) 
            l=1./l
            return new Vector3( x*l, y*l, z*l)
        

        function assign( real x, real y, real z ) returns Vector3
            this.x = x
            this.y = y
            this.z = z
            return this
    

        function addRealsNew( real x, real y, real z ) returns Vector3
            return new Vector3( this.x+x, this.y+y, this.z+z)
        


        function assignVec( Vector3 v ) returns Vector3
            real t1 =v.x
            real t2 =v.y
            real t3 =v.z
            x = t1
            y = t2
            z = t3
            return this
        

        function assignZero() returns Vector3
            x = 0.
            y = 0.
            z = 0.
            return this
        
     
        function norm() returns real
            return SquareRoot( x*x + y*y + z*z )
        
        /**
         * Returns the length of this vector.
         * z coordinate is truncated.
         * this vector is not modified.
         * @return real.NaN when real.isNaN(x) || real.isNaN(y)
         */
        function xynorm() returns real 
            return SquareRoot( x*x + y*y )
        

           
        /**
         * Returns the length of this vector.
         * this vector is not modified.
         * @return the length of this vector
         */
        function squaredNorm() returns real
            return x*x+y*y+z*z
        

           
        /**
         * Returns <tt>true</tt> if the absolute value of the three coordinates are
         * smaller or equal to epsilon.
         *
         * @param epsilon positive tolerance around zero
         * @return true when the coordinates are next to zero
         *         false in the other cases
         */
        function isEpsilon(real epsilon) returns boolean
            if (epsilon < 0.) 
                BJDebugMsg("epsilon must be positive")
            
            return -epsilon <= x and x <= epsilon and -epsilon <= y and y <= epsilon and -epsilon <= z and z <= epsilon
        

        /**
         * Returns a string representation of this vector.  The string
         * representation consists of the three dimentions in the order x, y, z,
         * enclosed in square brackets (<tt>"[]"</tt>). Adjacent elements are
         * separated by the characters <tt>", "</tt> (comma and space).
         * Elements are converted to strings as by @link real#toString(real).
         *
         * @return a string representation of this vector
         */
        function toString() returns string
            return  "[" + R2S(x) + ", " +R2S(y)+ ", " +R2S(z) + "]"
        
        
endpackage

//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    call InitTrig_Melee_Initialization(  )
    call InitTrig_Vector3(  )
endfunction

//===========================================================================
function RunInitializationTriggers takes nothing returns nothing
    call ConditionalTriggerExecute( gg_trg_Melee_Initialization )
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation( Player(0), 0 )
    call SetPlayerColor( Player(0), ConvertPlayerColor(0) )
    call SetPlayerRacePreference( Player(0), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(0), true )
    call SetPlayerController( Player(0), MAP_CONTROL_USER )

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_002
    call SetPlayerTeam( Player(0), 0 )

endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds( -3328.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), -3584.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 3328.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 3072.0 - GetCameraMargin(CAMERA_MARGIN_TOP), -3328.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 3072.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 3328.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), -3584.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM) )
    call SetDayNightModels( "Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl" )
    call NewSoundEnvironment( "Default" )
    call SetAmbientDaySound( "LordaeronSummerDay" )
    call SetAmbientNightSound( "LordaeronSummerNight" )
    call SetMapMusic( "Music", true, 0 )
    call CreateAllUnits(  )
    call InitBlizzard(  )
    call InitGlobals(  )
    call InitCustomTriggers(  )
    call RunInitializationTriggers(  )

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName( "Just another Warcraft III map" )
    call SetMapDescription( "Nondescript" )
    call SetPlayers( 1 )
    call SetTeams( 1 )
    call SetGamePlacement( MAP_PLACEMENT_USE_MAP_SETTINGS )

    call DefineStartLocation( 0, 448.0, 2432.0 )

    // Player setup
    call InitCustomPlayerSlots(  )
    call SetPlayerSlotAvailable( Player(0), MAP_CONTROL_USER )
    call InitGenericPlayerSlots(  )
endfunction

