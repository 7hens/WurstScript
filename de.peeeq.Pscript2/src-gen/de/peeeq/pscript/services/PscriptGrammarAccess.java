/*
* generated by Xtext
*/

package de.peeeq.pscript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPackagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackagesAssignment_1.eContents().get(0);
		private final Assignment cPackagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_2_0 = (RuleCall)cPackagesAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Program:
		//	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
		public ParserRule getRule() { return rule; }

		//NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*
		public Group getGroup() { return cGroup; }

		//NL*
		public RuleCall getNLTerminalRuleCall_0() { return cNLTerminalRuleCall_0; }

		//packages+=PackageDeclaration
		public Assignment getPackagesAssignment_1() { return cPackagesAssignment_1; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_1_0() { return cPackagesPackageDeclarationParserRuleCall_1_0; }

		//packages+=PackageDeclaration*
		public Assignment getPackagesAssignment_2() { return cPackagesAssignment_2; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_2_0() { return cPackagesPackageDeclarationParserRuleCall_2_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_3_1_0 = (RuleCall)cImportsAssignment_3_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElementsEntityParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(NL* imports+=Import)*
		public Group getGroup_3() { return cGroup_3; }

		//NL*
		public RuleCall getNLTerminalRuleCall_3_0() { return cNLTerminalRuleCall_3_0; }

		//imports+=Import
		public Assignment getImportsAssignment_3_1() { return cImportsAssignment_3_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_1_0() { return cImportsImportParserRuleCall_3_1_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }

		//(elements+=Entity NL*)*
		public Group getGroup_5() { return cGroup_5; }

		//elements+=Entity
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }

		//Entity
		public RuleCall getElementsEntityParserRuleCall_5_0_0() { return cElementsEntityParserRuleCall_5_0_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_5_1() { return cNLTerminalRuleCall_5_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//NL*
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard NL;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard NL
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Entity returns NameDef:
		//	TypeDef | FuncDef | VarDef;
		public ParserRule getRule() { return rule; }

		//TypeDef | FuncDef | VarDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//FuncDef
		public RuleCall getFuncDefParserRuleCall_1() { return cFuncDefParserRuleCall_1; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_2() { return cVarDefParserRuleCall_2; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNativeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * natives: * / TypeDef returns NameDef:
		//	NativeType | ClassDef;
		public ParserRule getRule() { return rule; }

		//NativeType | ClassDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//NativeType
		public RuleCall getNativeTypeParserRuleCall_0() { return cNativeTypeParserRuleCall_0; }

		//ClassDef
		public RuleCall getClassDefParserRuleCall_1() { return cClassDefParserRuleCall_1; }
	}

	public class NativeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNativeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOrigNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOrigNameIDTerminalRuleCall_5_0 = (RuleCall)cOrigNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSuperNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSuperNameIDTerminalRuleCall_6_1_0 = (RuleCall)cSuperNameAssignment_6_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//NativeType returns NameDef:
		//	{NativeType} "native" "type" name=ID "=" origName=ID ("extends" superName=ID)? NL;
		public ParserRule getRule() { return rule; }

		//{NativeType} "native" "type" name=ID "=" origName=ID ("extends" superName=ID)? NL
		public Group getGroup() { return cGroup; }

		//{NativeType}
		public Action getNativeTypeAction_0() { return cNativeTypeAction_0; }

		//"native"
		public Keyword getNativeKeyword_1() { return cNativeKeyword_1; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//origName=ID
		public Assignment getOrigNameAssignment_5() { return cOrigNameAssignment_5; }

		//ID
		public RuleCall getOrigNameIDTerminalRuleCall_5_0() { return cOrigNameIDTerminalRuleCall_5_0; }

		//("extends" superName=ID)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//superName=ID
		public Assignment getSuperNameAssignment_6_1() { return cSuperNameAssignment_6_1; }

		//ID
		public RuleCall getSuperNameIDTerminalRuleCall_6_1_0() { return cSuperNameIDTerminalRuleCall_6_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
	}

	public class ClassDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersClassMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		/// * classes and their members * / ClassDef returns NameDef:
		//	{ClassDef} "class" name=ID "{" members+=ClassMember* NL* "}" NL;
		public ParserRule getRule() { return rule; }

		//{ClassDef} "class" name=ID "{" members+=ClassMember* NL* "}" NL
		public Group getGroup() { return cGroup; }

		//{ClassDef}
		public Action getClassDefAction_0() { return cClassDefAction_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=ClassMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//ClassMember
		public RuleCall getMembersClassMemberParserRuleCall_4_0() { return cMembersClassMemberParserRuleCall_4_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//NL
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
	}

	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cFuncDefParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ClassMember returns NameDef:
		//	NL* (VarDef | FuncDef);
		public ParserRule getRule() { return rule; }

		//NL* (VarDef | FuncDef)
		public Group getGroup() { return cGroup; }

		//NL*
		public RuleCall getNLTerminalRuleCall_0() { return cNLTerminalRuleCall_0; }

		//VarDef | FuncDef
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_1_0() { return cVarDefParserRuleCall_1_0; }

		//FuncDef
		public RuleCall getFuncDefParserRuleCall_1_1() { return cFuncDefParserRuleCall_1_1; }
	}

	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cConstantValKeyword_1_1_0 = (Keyword)cConstantAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_4_1_0 = (RuleCall)cEAssignment_4_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//VarDef returns NameDef:
		//	{VarDef} ("var" | constant?="val") name=ID (":" type=TypeExpr)? ("=" e=Expr)? NL;
		public ParserRule getRule() { return rule; }

		//{VarDef} ("var" | constant?="val") name=ID (":" type=TypeExpr)? ("=" e=Expr)? NL
		public Group getGroup() { return cGroup; }

		//{VarDef}
		public Action getVarDefAction_0() { return cVarDefAction_0; }

		//"var" | constant?="val"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"var"
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }

		//constant?="val"
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }

		//"val"
		public Keyword getConstantValKeyword_1_1_0() { return cConstantValKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" type=TypeExpr)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_3_1_0() { return cTypeTypeExprParserRuleCall_3_1_0; }

		//("=" e=Expr)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//e=Expr
		public Assignment getEAssignment_4_1() { return cEAssignment_4_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_4_1_0() { return cEExprParserRuleCall_4_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }
	}

	public class TypeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameNameDefCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameNameDefIDTerminalRuleCall_1_0_1 = (RuleCall)cNameNameDefCrossReference_1_0.eContents().get(1);
		
		//TypeExpr:
		//	{TypeExpr} name=[NameDef];
		public ParserRule getRule() { return rule; }

		//{TypeExpr} name=[NameDef]
		public Group getGroup() { return cGroup; }

		//{TypeExpr}
		public Action getTypeExprAction_0() { return cTypeExprAction_0; }

		//name=[NameDef]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[NameDef]
		public CrossReference getNameNameDefCrossReference_1_0() { return cNameNameDefCrossReference_1_0; }

		//ID
		public RuleCall getNameNameDefIDTerminalRuleCall_1_0_1() { return cNameNameDefIDTerminalRuleCall_1_0_1; }
	}

	public class FuncDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementsParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		/// * functions * / FuncDef returns NameDef:
		//	{FuncDef} "function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" (":" type=TypeExpr)?
		//	"{" body=Statements "}";
		public ParserRule getRule() { return rule; }

		//{FuncDef} "function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" (":" type=TypeExpr)?
		//"{" body=Statements "}"
		public Group getGroup() { return cGroup; }

		//{FuncDef}
		public Action getFuncDefAction_0() { return cFuncDefAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_0_0() { return cParametersParameterDefParserRuleCall_4_0_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_1_1_0() { return cParametersParameterDefParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" type=TypeExpr)?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_6_1_0() { return cTypeTypeExprParserRuleCall_6_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//body=Statements
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_8_0() { return cBodyStatementsParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExprParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ParameterDef returns NameDef:
		//	{ParameterDef} name=ID ":" type=TypeExpr;
		public ParserRule getRule() { return rule; }

		//{ParameterDef} name=ID ":" type=TypeExpr
		public Group getGroup() { return cGroup; }

		//{ParameterDef}
		public Action getParameterDefAction_0() { return cParameterDefAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpr
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_3_0() { return cTypeTypeExprParserRuleCall_3_0; }
	}

	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//Statements:
		//	{Statements} (NL | statements+=Statement)*;
		public ParserRule getRule() { return rule; }

		//{Statements} (NL | statements+=Statement)*
		public Group getGroup() { return cGroup; }

		//{Statements}
		public Action getStatementsAction_0() { return cStatementsAction_0; }

		//(NL | statements+=Statement)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_0() { return cNLTerminalRuleCall_1_0; }

		//statements+=Statement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStmtIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStmtWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStmtExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStmtReturnParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	StmtIf | StmtWhile | VarDef | StmtExpr | StmtReturn;
		public ParserRule getRule() { return rule; }

		//StmtIf | StmtWhile | VarDef | StmtExpr | StmtReturn
		public Alternatives getAlternatives() { return cAlternatives; }

		//StmtIf
		public RuleCall getStmtIfParserRuleCall_0() { return cStmtIfParserRuleCall_0; }

		//StmtWhile
		public RuleCall getStmtWhileParserRuleCall_1() { return cStmtWhileParserRuleCall_1; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_2() { return cVarDefParserRuleCall_2; }

		//StmtExpr
		public RuleCall getStmtExprParserRuleCall_3() { return cStmtExprParserRuleCall_3; }

		//StmtReturn
		public RuleCall getStmtReturnParserRuleCall_4() { return cStmtReturnParserRuleCall_4; }
	}

	public class StmtReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExprParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StmtReturn:
		//	{StmtReturn} "return" e=Expr? NL;
		public ParserRule getRule() { return rule; }

		//{StmtReturn} "return" e=Expr? NL
		public Group getGroup() { return cGroup; }

		//{StmtReturn}
		public Action getStmtReturnAction_0() { return cStmtReturnAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//e=Expr?
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expr
		public RuleCall getEExprParserRuleCall_2_0() { return cEExprParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class StmtIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenBlockStatementsParserRuleCall_3_0 = (RuleCall)cThenBlockAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElseBlockAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElseBlockStatementsParserRuleCall_5_2_0 = (RuleCall)cElseBlockAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//StmtIf:
		//	"if" cond=Expr "{" thenBlock=Statements "}" ("else" "{" elseBlock=Statements "}")?;
		public ParserRule getRule() { return rule; }

		//"if" cond=Expr "{" thenBlock=Statements "}" ("else" "{" elseBlock=Statements "}")?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//thenBlock=Statements
		public Assignment getThenBlockAssignment_3() { return cThenBlockAssignment_3; }

		//Statements
		public RuleCall getThenBlockStatementsParserRuleCall_3_0() { return cThenBlockStatementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//("else" "{" elseBlock=Statements "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//elseBlock=Statements
		public Assignment getElseBlockAssignment_5_2() { return cElseBlockAssignment_5_2; }

		//Statements
		public RuleCall getElseBlockStatementsParserRuleCall_5_2_0() { return cElseBlockStatementsParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}

	public class StmtWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementsParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StmtWhile:
		//	"while" cond=Expr "{" body=Statements "}";
		public ParserRule getRule() { return rule; }

		//"while" cond=Expr "{" body=Statements "}"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body=Statements
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_3_0() { return cBodyStatementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StmtExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEExprParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StmtExpr:
		//	e=Expr NL;
		public ParserRule getRule() { return rule; }

		//e=Expr NL
		public Group getGroup() { return cGroup; }

		//e=Expr
		public Assignment getEAssignment_0() { return cEAssignment_0; }

		//Expr
		public RuleCall getEExprParserRuleCall_0_0() { return cEExprParserRuleCall_0_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_1() { return cNLTerminalRuleCall_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cExprAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * expressions * / / * operator precedence (weakest first):
		//
		//or
		//
		//and
		//
		//= !=				// equals has only one (why would we need more? ;)
		//
		//<= >= < >			// comparisons
		//
		//+ -
		//
		// * / % mod div		// mod and div work on integers, / and % 
		//
		//
		//
		//
		//
		//+ -					// unary
		//
		//not					// unary
		//
		//
		//
		//.					// member
		//
		// * / //ExprAtomic
		//
		//Expr:
		//	ExprAssignment;
		public ParserRule getRule() { return rule; }

		//ExprAssignment
		public RuleCall getExprAssignmentParserRuleCall() { return cExprAssignmentParserRuleCall; }
	}

	public class ExprAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpHyphenMinusEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// TODO this is not really an expression, it should only be used at top level
		//
		//ExprAssignment returns Expr:
		//	ExprOr ({ExprAssignment.left=current} op=("=" | "+=" | "-=") right=ExprOr)*;
		public ParserRule getRule() { return rule; }

		//ExprOr ({ExprAssignment.left=current} op=("=" | "+=" | "-=") right=ExprOr)*
		public Group getGroup() { return cGroup; }

		//ExprOr
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }

		//({ExprAssignment.left=current} op=("=" | "+=" | "-=") right=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAssignment.left=current}
		public Action getExprAssignmentLeftAction_1_0() { return cExprAssignmentLeftAction_1_0; }

		//op=("=" | "+=" | "-=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"=" | "+=" | "-="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }

		//"+="
		public Keyword getOpPlusSignEqualsSignKeyword_1_1_0_1() { return cOpPlusSignEqualsSignKeyword_1_1_0_1; }

		//"-="
		public Keyword getOpHyphenMinusEqualsSignKeyword_1_1_0_2() { return cOpHyphenMinusEqualsSignKeyword_1_1_0_2; }

		//right=ExprOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprOr
		public RuleCall getRightExprOrParserRuleCall_1_2_0() { return cRightExprOrParserRuleCall_1_2_0; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprOr returns Expr:
		//	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
		public ParserRule getRule() { return rule; }

		//ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*
		public Group getGroup() { return cGroup; }

		//ExprAnd
		public RuleCall getExprAndParserRuleCall_0() { return cExprAndParserRuleCall_0; }

		//({ExprOr.left=current} op="or" right=ExprAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprOr.left=current}
		public Action getExprOrLeftAction_1_0() { return cExprOrLeftAction_1_0; }

		//op="or"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }

		//right=ExprAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAnd
		public RuleCall getRightExprAndParserRuleCall_1_2_0() { return cRightExprAndParserRuleCall_1_2_0; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAnd returns Expr:
		//	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
		public ParserRule getRule() { return rule; }

		//ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*
		public Group getGroup() { return cGroup; }

		//ExprEquality
		public RuleCall getExprEqualityParserRuleCall_0() { return cExprEqualityParserRuleCall_0; }

		//({ExprAnd.left=current} op="and" right=ExprEquality)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAnd.left=current}
		public Action getExprAndLeftAction_1_0() { return cExprAndLeftAction_1_0; }

		//op="and"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }

		//right=ExprEquality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprEquality
		public RuleCall getRightExprEqualityParserRuleCall_1_2_0() { return cRightExprEqualityParserRuleCall_1_2_0; }
	}

	public class ExprEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprEquality returns Expr:
		//	ExprComparison ({ExprEquality.left=current} op=("!=" | "==") right=ExprComparison)*;
		public ParserRule getRule() { return rule; }

		//ExprComparison ({ExprEquality.left=current} op=("!=" | "==") right=ExprComparison)*
		public Group getGroup() { return cGroup; }

		//ExprComparison
		public RuleCall getExprComparisonParserRuleCall_0() { return cExprComparisonParserRuleCall_0; }

		//({ExprEquality.left=current} op=("!=" | "==") right=ExprComparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprEquality.left=current}
		public Action getExprEqualityLeftAction_1_0() { return cExprEqualityLeftAction_1_0; }

		//op=("!=" | "==")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"!=" | "=="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_0() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_1() { return cOpEqualsSignEqualsSignKeyword_1_1_0_1; }

		//right=ExprComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprComparison
		public RuleCall getRightExprComparisonParserRuleCall_1_2_0() { return cRightExprComparisonParserRuleCall_1_2_0; }
	}

	public class ExprComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprComparison returns Expr:
		//	ExprAdditive ({ExprComparison.left=current} op=("<=" | "<" | ">=" | ">") right=ExprAdditive)*;
		public ParserRule getRule() { return rule; }

		//ExprAdditive ({ExprComparison.left=current} op=("<=" | "<" | ">=" | ">") right=ExprAdditive)*
		public Group getGroup() { return cGroup; }

		//ExprAdditive
		public RuleCall getExprAdditiveParserRuleCall_0() { return cExprAdditiveParserRuleCall_0; }

		//({ExprComparison.left=current} op=("<=" | "<" | ">=" | ">") right=ExprAdditive)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprComparison.left=current}
		public Action getExprComparisonLeftAction_1_0() { return cExprComparisonLeftAction_1_0; }

		//op=("<=" | "<" | ">=" | ">")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<=" | "<" | ">=" | ">"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_0() { return cOpLessThanSignEqualsSignKeyword_1_1_0_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_1() { return cOpLessThanSignKeyword_1_1_0_1; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_2; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_3() { return cOpGreaterThanSignKeyword_1_1_0_3; }

		//right=ExprAdditive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAdditive
		public RuleCall getRightExprAdditiveParserRuleCall_1_2_0() { return cRightExprAdditiveParserRuleCall_1_2_0; }
	}

	public class ExprAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAdditive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprMultParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAdditiveLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprMultParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAdditive returns Expr:
		//	ExprMult ({ExprAdditive.left=current} op=("+" | "-") right=ExprMult)*;
		public ParserRule getRule() { return rule; }

		//ExprMult ({ExprAdditive.left=current} op=("+" | "-") right=ExprMult)*
		public Group getGroup() { return cGroup; }

		//ExprMult
		public RuleCall getExprMultParserRuleCall_0() { return cExprMultParserRuleCall_0; }

		//({ExprAdditive.left=current} op=("+" | "-") right=ExprMult)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAdditive.left=current}
		public Action getExprAdditiveLeftAction_1_0() { return cExprAdditiveLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=ExprMult
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprMult
		public RuleCall getRightExprMultParserRuleCall_1_2_0() { return cRightExprMultParserRuleCall_1_2_0; }
	}

	public class ExprMultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMultLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpModKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpDivKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprSignParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprMult returns Expr:
		//	ExprSign ({ExprMult.left=current} op=("*" | "/" | "%" | "mod" | "div") right=ExprSign)*;
		public ParserRule getRule() { return rule; }

		//ExprSign ({ExprMult.left=current} op=("*" | "/" | "%" | "mod" | "div") right=ExprSign)*
		public Group getGroup() { return cGroup; }

		//ExprSign
		public RuleCall getExprSignParserRuleCall_0() { return cExprSignParserRuleCall_0; }

		//({ExprMult.left=current} op=("*" | "/" | "%" | "mod" | "div") right=ExprSign)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMult.left=current}
		public Action getExprMultLeftAction_1_0() { return cExprMultLeftAction_1_0; }

		//op=("*" | "/" | "%" | "mod" | "div")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "%" | "mod" | "div"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }

		//"mod"
		public Keyword getOpModKeyword_1_1_0_3() { return cOpModKeyword_1_1_0_3; }

		//"div"
		public Keyword getOpDivKeyword_1_1_0_4() { return cOpDivKeyword_1_1_0_4; }

		//right=ExprSign
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprSign
		public RuleCall getRightExprSignParserRuleCall_1_2_0() { return cRightExprSignParserRuleCall_1_2_0; }
	}

	public class ExprSignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprSignAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightExprNotParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final RuleCall cExprNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprSign returns Expr:
		//	{ExprSign} op=("+" | "-") right=ExprNot | ExprNot;
		public ParserRule getRule() { return rule; }

		//{ExprSign} op=("+" | "-") right=ExprNot | ExprNot
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprSign} op=("+" | "-") right=ExprNot
		public Group getGroup_0() { return cGroup_0; }

		//{ExprSign}
		public Action getExprSignAction_0_0() { return cExprSignAction_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_0_1_0_0() { return cOpPlusSignKeyword_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_1() { return cOpHyphenMinusKeyword_0_1_0_1; }

		//right=ExprNot
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//ExprNot
		public RuleCall getRightExprNotParserRuleCall_0_2_0() { return cRightExprNotParserRuleCall_0_2_0; }

		//ExprNot
		public RuleCall getExprNotParserRuleCall_1() { return cExprNotParserRuleCall_1; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpNotKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightExprMemberParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final RuleCall cExprMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNot returns Expr:
		//	{ExprNot} op="not" right=ExprMember | ExprMember;
		public ParserRule getRule() { return rule; }

		//{ExprNot} op="not" right=ExprMember | ExprMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprNot} op="not" right=ExprMember
		public Group getGroup_0() { return cGroup_0; }

		//{ExprNot}
		public Action getExprNotAction_0_0() { return cExprNotAction_0_0; }

		//op="not"
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0() { return cOpNotKeyword_0_1_0; }

		//right=ExprMember
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//ExprMember
		public RuleCall getRightExprMemberParserRuleCall_0_2_0() { return cRightExprMemberParserRuleCall_0_2_0; }

		//ExprMember
		public RuleCall getExprMemberParserRuleCall_1() { return cExprMemberParserRuleCall_1; }
	}

	public class ExprMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMemberLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpFullStopKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAtomicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////ExprCustomOperator returns Expr:
		//
		////	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
		//
		////; 
		//
		//ExprMember returns Expr:
		//	ExprAtomic ({ExprMember.left=current} op="." right=ExprAtomic)*;
		public ParserRule getRule() { return rule; }

		//ExprAtomic ({ExprMember.left=current} op="." right=ExprAtomic)*
		public Group getGroup() { return cGroup; }

		//ExprAtomic
		public RuleCall getExprAtomicParserRuleCall_0() { return cExprAtomicParserRuleCall_0; }

		//({ExprMember.left=current} op="." right=ExprAtomic)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMember.left=current}
		public Action getExprMemberLeftAction_1_0() { return cExprMemberLeftAction_1_0; }

		//op="."
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"."
		public Keyword getOpFullStopKeyword_1_1_0() { return cOpFullStopKeyword_1_1_0; }

		//right=ExprAtomic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAtomic
		public RuleCall getRightExprAtomicParserRuleCall_1_2_0() { return cRightExprAtomicParserRuleCall_1_2_0; }
	}

	public class ExprAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprFunctioncallAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cNameValFuncDefCrossReference_0_1_0 = (CrossReference)cNameValAssignment_0_1.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNameValFuncDefCrossReference_0_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParametersExprListParserRuleCall_0_2_0 = (RuleCall)cParametersAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprFunctioncallAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameValFuncDefCrossReference_1_1_0 = (CrossReference)cNameValAssignment_1_1.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameValFuncDefCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprIdentifierAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNameValNameDefCrossReference_2_1_0 = (CrossReference)cNameValAssignment_2_1.eContents().get(0);
		private final RuleCall cNameValNameDefIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNameValNameDefCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExprParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExprIntValAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cIntValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_4_1_0 = (RuleCall)cIntValAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExprNumValAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNumValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNumValNUMBERTerminalRuleCall_5_1_0 = (RuleCall)cNumValAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExprStrvalAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cStrValAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStrValSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cStrValAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExprBoolValAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cBoolValAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Alternatives cBoolValAlternatives_7_1_0 = (Alternatives)cBoolValAssignment_7_1.eContents().get(0);
		private final Keyword cBoolValTrueKeyword_7_1_0_0 = (Keyword)cBoolValAlternatives_7_1_0.eContents().get(0);
		private final Keyword cBoolValFalseKeyword_7_1_0_1 = (Keyword)cBoolValAlternatives_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExprBuildinFunctionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cBuildinKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cNameAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_8_2_0 = (RuleCall)cNameAssignment_8_2.eContents().get(0);
		private final Alternatives cAlternatives_8_3 = (Alternatives)cGroup_8.eContents().get(3);
		private final Assignment cParametersAssignment_8_3_0 = (Assignment)cAlternatives_8_3.eContents().get(0);
		private final RuleCall cParametersExprListParserRuleCall_8_3_0_0 = (RuleCall)cParametersAssignment_8_3_0.eContents().get(0);
		private final Group cGroup_8_3_1 = (Group)cAlternatives_8_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_3_1_0 = (Keyword)cGroup_8_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3_1_1 = (Keyword)cGroup_8_3_1.eContents().get(1);
		
		////	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
		//
		////	| buildin?='buildin' name=ID parameters=ExprList
		//
		////	| buildin?='buildin' name=ID '(' ')'
		//
		////	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
		//
		//ExprAtomic returns Expr:
		//	{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")" |
		//	{ExprIdentifier} nameVal=[NameDef] | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=NUMBER |
		//	{ExprStrval} strVal=STRING | {ExprBoolVal} boolVal=("true" | "false") | {ExprBuildinFunction} "buildin" name=ID
		//	(parameters=ExprList | "(" ")");
		public ParserRule getRule() { return rule; }

		//{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")" |
		//{ExprIdentifier} nameVal=[NameDef] | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=NUMBER | {ExprStrval}
		//strVal=STRING | {ExprBoolVal} boolVal=("true" | "false") | {ExprBuildinFunction} "buildin" name=ID (parameters=ExprList
		//| "(" ")")
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList
		public Group getGroup_0() { return cGroup_0; }

		//{ExprFunctioncall}
		public Action getExprFunctioncallAction_0_0() { return cExprFunctioncallAction_0_0; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_0_1() { return cNameValAssignment_0_1; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_0_1_0() { return cNameValFuncDefCrossReference_0_1_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_0_1_0_1() { return cNameValFuncDefIDTerminalRuleCall_0_1_0_1; }

		//parameters=ExprList
		public Assignment getParametersAssignment_0_2() { return cParametersAssignment_0_2; }

		//ExprList
		public RuleCall getParametersExprListParserRuleCall_0_2_0() { return cParametersExprListParserRuleCall_0_2_0; }

		//{ExprFunctioncall} nameVal=[FuncDef] "(" ")"
		public Group getGroup_1() { return cGroup_1; }

		//{ExprFunctioncall}
		public Action getExprFunctioncallAction_1_0() { return cExprFunctioncallAction_1_0; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_1_1() { return cNameValAssignment_1_1; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_1_1_0() { return cNameValFuncDefCrossReference_1_1_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_1_1_0_1() { return cNameValFuncDefIDTerminalRuleCall_1_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//{ExprIdentifier} nameVal=[NameDef]
		public Group getGroup_2() { return cGroup_2; }

		//{ExprIdentifier}
		public Action getExprIdentifierAction_2_0() { return cExprIdentifierAction_2_0; }

		//nameVal=[NameDef]
		public Assignment getNameValAssignment_2_1() { return cNameValAssignment_2_1; }

		//[NameDef]
		public CrossReference getNameValNameDefCrossReference_2_1_0() { return cNameValNameDefCrossReference_2_1_0; }

		//ID
		public RuleCall getNameValNameDefIDTerminalRuleCall_2_1_0_1() { return cNameValNameDefIDTerminalRuleCall_2_1_0_1; }

		//"(" Expr ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//Expr
		public RuleCall getExprParserRuleCall_3_1() { return cExprParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//{ExprIntVal} intVal=INT
		public Group getGroup_4() { return cGroup_4; }

		//{ExprIntVal}
		public Action getExprIntValAction_4_0() { return cExprIntValAction_4_0; }

		//intVal=INT
		public Assignment getIntValAssignment_4_1() { return cIntValAssignment_4_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_4_1_0() { return cIntValINTTerminalRuleCall_4_1_0; }

		//{ExprNumVal} numVal=NUMBER
		public Group getGroup_5() { return cGroup_5; }

		//{ExprNumVal}
		public Action getExprNumValAction_5_0() { return cExprNumValAction_5_0; }

		//numVal=NUMBER
		public Assignment getNumValAssignment_5_1() { return cNumValAssignment_5_1; }

		//NUMBER
		public RuleCall getNumValNUMBERTerminalRuleCall_5_1_0() { return cNumValNUMBERTerminalRuleCall_5_1_0; }

		//{ExprStrval} strVal=STRING
		public Group getGroup_6() { return cGroup_6; }

		//{ExprStrval}
		public Action getExprStrvalAction_6_0() { return cExprStrvalAction_6_0; }

		//strVal=STRING
		public Assignment getStrValAssignment_6_1() { return cStrValAssignment_6_1; }

		//STRING
		public RuleCall getStrValSTRINGTerminalRuleCall_6_1_0() { return cStrValSTRINGTerminalRuleCall_6_1_0; }

		//{ExprBoolVal} boolVal=("true" | "false")
		public Group getGroup_7() { return cGroup_7; }

		//{ExprBoolVal}
		public Action getExprBoolValAction_7_0() { return cExprBoolValAction_7_0; }

		//boolVal=("true" | "false")
		public Assignment getBoolValAssignment_7_1() { return cBoolValAssignment_7_1; }

		//"true" | "false"
		public Alternatives getBoolValAlternatives_7_1_0() { return cBoolValAlternatives_7_1_0; }

		//"true"
		public Keyword getBoolValTrueKeyword_7_1_0_0() { return cBoolValTrueKeyword_7_1_0_0; }

		//"false"
		public Keyword getBoolValFalseKeyword_7_1_0_1() { return cBoolValFalseKeyword_7_1_0_1; }

		//{ExprBuildinFunction} "buildin" name=ID (parameters=ExprList | "(" ")")
		public Group getGroup_8() { return cGroup_8; }

		//{ExprBuildinFunction}
		public Action getExprBuildinFunctionAction_8_0() { return cExprBuildinFunctionAction_8_0; }

		//"buildin"
		public Keyword getBuildinKeyword_8_1() { return cBuildinKeyword_8_1; }

		//name=ID
		public Assignment getNameAssignment_8_2() { return cNameAssignment_8_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_8_2_0() { return cNameIDTerminalRuleCall_8_2_0; }

		//parameters=ExprList | "(" ")"
		public Alternatives getAlternatives_8_3() { return cAlternatives_8_3; }

		//parameters=ExprList
		public Assignment getParametersAssignment_8_3_0() { return cParametersAssignment_8_3_0; }

		//ExprList
		public RuleCall getParametersExprListParserRuleCall_8_3_0_0() { return cParametersExprListParserRuleCall_8_3_0_0; }

		//"(" ")"
		public Group getGroup_8_3_1() { return cGroup_8_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_3_1_0() { return cLeftParenthesisKeyword_8_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_3_1_1() { return cRightParenthesisKeyword_8_3_1_1; }
	}

	public class ExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprList:
		//	"(" params+=Expr ("," params+=Expr)* ")";
		public ParserRule getRule() { return rule; }

		//"(" params+=Expr ("," params+=Expr)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//params+=Expr
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_1_0() { return cParamsExprParserRuleCall_1_0; }

		//("," params+=Expr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//params+=Expr
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_2_1_0() { return cParamsExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private ProgramElements pProgram;
	private PackageDeclarationElements pPackageDeclaration;
	private ImportElements pImport;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private EntityElements pEntity;
	private TypeDefElements pTypeDef;
	private NativeTypeElements pNativeType;
	private ClassDefElements pClassDef;
	private ClassMemberElements pClassMember;
	private VarDefElements pVarDef;
	private TypeExprElements pTypeExpr;
	private FuncDefElements pFuncDef;
	private ParameterDefElements pParameterDef;
	private StatementsElements pStatements;
	private StatementElements pStatement;
	private StmtReturnElements pStmtReturn;
	private StmtIfElements pStmtIf;
	private StmtWhileElements pStmtWhile;
	private StmtExprElements pStmtExpr;
	private ExprElements pExpr;
	private ExprAssignmentElements pExprAssignment;
	private ExprOrElements pExprOr;
	private ExprAndElements pExprAnd;
	private ExprEqualityElements pExprEquality;
	private ExprComparisonElements pExprComparison;
	private ExprAdditiveElements pExprAdditive;
	private ExprMultElements pExprMult;
	private ExprSignElements pExprSign;
	private ExprNotElements pExprNot;
	private ExprMemberElements pExprMember;
	private ExprAtomicElements pExprAtomic;
	private ExprListElements pExprList;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tNUMBER;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tNL;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public PscriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Program:
	//	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL*;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard NL;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Entity returns NameDef:
	//	TypeDef | FuncDef | VarDef;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	/// * natives: * / TypeDef returns NameDef:
	//	NativeType | ClassDef;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//NativeType returns NameDef:
	//	{NativeType} "native" "type" name=ID "=" origName=ID ("extends" superName=ID)? NL;
	public NativeTypeElements getNativeTypeAccess() {
		return (pNativeType != null) ? pNativeType : (pNativeType = new NativeTypeElements());
	}
	
	public ParserRule getNativeTypeRule() {
		return getNativeTypeAccess().getRule();
	}

	/// * classes and their members * / ClassDef returns NameDef:
	//	{ClassDef} "class" name=ID "{" members+=ClassMember* NL* "}" NL;
	public ClassDefElements getClassDefAccess() {
		return (pClassDef != null) ? pClassDef : (pClassDef = new ClassDefElements());
	}
	
	public ParserRule getClassDefRule() {
		return getClassDefAccess().getRule();
	}

	//ClassMember returns NameDef:
	//	NL* (VarDef | FuncDef);
	public ClassMemberElements getClassMemberAccess() {
		return (pClassMember != null) ? pClassMember : (pClassMember = new ClassMemberElements());
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}

	//VarDef returns NameDef:
	//	{VarDef} ("var" | constant?="val") name=ID (":" type=TypeExpr)? ("=" e=Expr)? NL;
	public VarDefElements getVarDefAccess() {
		return (pVarDef != null) ? pVarDef : (pVarDef = new VarDefElements());
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}

	//TypeExpr:
	//	{TypeExpr} name=[NameDef];
	public TypeExprElements getTypeExprAccess() {
		return (pTypeExpr != null) ? pTypeExpr : (pTypeExpr = new TypeExprElements());
	}
	
	public ParserRule getTypeExprRule() {
		return getTypeExprAccess().getRule();
	}

	/// * functions * / FuncDef returns NameDef:
	//	{FuncDef} "function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" (":" type=TypeExpr)?
	//	"{" body=Statements "}";
	public FuncDefElements getFuncDefAccess() {
		return (pFuncDef != null) ? pFuncDef : (pFuncDef = new FuncDefElements());
	}
	
	public ParserRule getFuncDefRule() {
		return getFuncDefAccess().getRule();
	}

	//ParameterDef returns NameDef:
	//	{ParameterDef} name=ID ":" type=TypeExpr;
	public ParameterDefElements getParameterDefAccess() {
		return (pParameterDef != null) ? pParameterDef : (pParameterDef = new ParameterDefElements());
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	//Statements:
	//	{Statements} (NL | statements+=Statement)*;
	public StatementsElements getStatementsAccess() {
		return (pStatements != null) ? pStatements : (pStatements = new StatementsElements());
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}

	//Statement:
	//	StmtIf | StmtWhile | VarDef | StmtExpr | StmtReturn;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//StmtReturn:
	//	{StmtReturn} "return" e=Expr? NL;
	public StmtReturnElements getStmtReturnAccess() {
		return (pStmtReturn != null) ? pStmtReturn : (pStmtReturn = new StmtReturnElements());
	}
	
	public ParserRule getStmtReturnRule() {
		return getStmtReturnAccess().getRule();
	}

	//StmtIf:
	//	"if" cond=Expr "{" thenBlock=Statements "}" ("else" "{" elseBlock=Statements "}")?;
	public StmtIfElements getStmtIfAccess() {
		return (pStmtIf != null) ? pStmtIf : (pStmtIf = new StmtIfElements());
	}
	
	public ParserRule getStmtIfRule() {
		return getStmtIfAccess().getRule();
	}

	//StmtWhile:
	//	"while" cond=Expr "{" body=Statements "}";
	public StmtWhileElements getStmtWhileAccess() {
		return (pStmtWhile != null) ? pStmtWhile : (pStmtWhile = new StmtWhileElements());
	}
	
	public ParserRule getStmtWhileRule() {
		return getStmtWhileAccess().getRule();
	}

	//StmtExpr:
	//	e=Expr NL;
	public StmtExprElements getStmtExprAccess() {
		return (pStmtExpr != null) ? pStmtExpr : (pStmtExpr = new StmtExprElements());
	}
	
	public ParserRule getStmtExprRule() {
		return getStmtExprAccess().getRule();
	}

	/// * expressions * / / * operator precedence (weakest first):
	//
	//or
	//
	//and
	//
	//= !=				// equals has only one (why would we need more? ;)
	//
	//<= >= < >			// comparisons
	//
	//+ -
	//
	// * / % mod div		// mod and div work on integers, / and % 
	//
	//
	//
	//
	//
	//+ -					// unary
	//
	//not					// unary
	//
	//
	//
	//.					// member
	//
	// * / //ExprAtomic
	//
	//Expr:
	//	ExprAssignment;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//// TODO this is not really an expression, it should only be used at top level
	//
	//ExprAssignment returns Expr:
	//	ExprOr ({ExprAssignment.left=current} op=("=" | "+=" | "-=") right=ExprOr)*;
	public ExprAssignmentElements getExprAssignmentAccess() {
		return (pExprAssignment != null) ? pExprAssignment : (pExprAssignment = new ExprAssignmentElements());
	}
	
	public ParserRule getExprAssignmentRule() {
		return getExprAssignmentAccess().getRule();
	}

	//ExprOr returns Expr:
	//	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
	public ExprOrElements getExprOrAccess() {
		return (pExprOr != null) ? pExprOr : (pExprOr = new ExprOrElements());
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//ExprAnd returns Expr:
	//	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
	public ExprAndElements getExprAndAccess() {
		return (pExprAnd != null) ? pExprAnd : (pExprAnd = new ExprAndElements());
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprEquality returns Expr:
	//	ExprComparison ({ExprEquality.left=current} op=("!=" | "==") right=ExprComparison)*;
	public ExprEqualityElements getExprEqualityAccess() {
		return (pExprEquality != null) ? pExprEquality : (pExprEquality = new ExprEqualityElements());
	}
	
	public ParserRule getExprEqualityRule() {
		return getExprEqualityAccess().getRule();
	}

	//ExprComparison returns Expr:
	//	ExprAdditive ({ExprComparison.left=current} op=("<=" | "<" | ">=" | ">") right=ExprAdditive)*;
	public ExprComparisonElements getExprComparisonAccess() {
		return (pExprComparison != null) ? pExprComparison : (pExprComparison = new ExprComparisonElements());
	}
	
	public ParserRule getExprComparisonRule() {
		return getExprComparisonAccess().getRule();
	}

	//ExprAdditive returns Expr:
	//	ExprMult ({ExprAdditive.left=current} op=("+" | "-") right=ExprMult)*;
	public ExprAdditiveElements getExprAdditiveAccess() {
		return (pExprAdditive != null) ? pExprAdditive : (pExprAdditive = new ExprAdditiveElements());
	}
	
	public ParserRule getExprAdditiveRule() {
		return getExprAdditiveAccess().getRule();
	}

	//ExprMult returns Expr:
	//	ExprSign ({ExprMult.left=current} op=("*" | "/" | "%" | "mod" | "div") right=ExprSign)*;
	public ExprMultElements getExprMultAccess() {
		return (pExprMult != null) ? pExprMult : (pExprMult = new ExprMultElements());
	}
	
	public ParserRule getExprMultRule() {
		return getExprMultAccess().getRule();
	}

	//ExprSign returns Expr:
	//	{ExprSign} op=("+" | "-") right=ExprNot | ExprNot;
	public ExprSignElements getExprSignAccess() {
		return (pExprSign != null) ? pExprSign : (pExprSign = new ExprSignElements());
	}
	
	public ParserRule getExprSignRule() {
		return getExprSignAccess().getRule();
	}

	//ExprNot returns Expr:
	//	{ExprNot} op="not" right=ExprMember | ExprMember;
	public ExprNotElements getExprNotAccess() {
		return (pExprNot != null) ? pExprNot : (pExprNot = new ExprNotElements());
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	////ExprCustomOperator returns Expr:
	//
	////	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
	//
	////; 
	//
	//ExprMember returns Expr:
	//	ExprAtomic ({ExprMember.left=current} op="." right=ExprAtomic)*;
	public ExprMemberElements getExprMemberAccess() {
		return (pExprMember != null) ? pExprMember : (pExprMember = new ExprMemberElements());
	}
	
	public ParserRule getExprMemberRule() {
		return getExprMemberAccess().getRule();
	}

	////	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
	//
	////	| buildin?='buildin' name=ID parameters=ExprList
	//
	////	| buildin?='buildin' name=ID '(' ')'
	//
	////	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
	//
	//ExprAtomic returns Expr:
	//	{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")" |
	//	{ExprIdentifier} nameVal=[NameDef] | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=NUMBER |
	//	{ExprStrval} strVal=STRING | {ExprBoolVal} boolVal=("true" | "false") | {ExprBuildinFunction} "buildin" name=ID
	//	(parameters=ExprList | "(" ")");
	public ExprAtomicElements getExprAtomicAccess() {
		return (pExprAtomic != null) ? pExprAtomic : (pExprAtomic = new ExprAtomicElements());
	}
	
	public ParserRule getExprAtomicRule() {
		return getExprAtomicAccess().getRule();
	}

	//ExprList:
	//	"(" params+=Expr ("," params+=Expr)* ")";
	public ExprListElements getExprListAccess() {
		return (pExprList != null) ? pExprList : (pExprList = new ExprListElements());
	}
	
	public ParserRule getExprListRule() {
		return getExprListAccess().getRule();
	}

	//// stolen and adjusted from java antlr grammer:
	//
	////Ref:
	//
	////	referenced=[NameDef|ID];
	//
	/// * reference types 
	//
	//FuncRef:
	//
	//	referenced=[FuncDef|QualifiedName];
	//
	//
	//
	//VarRef:
	//
	//	referenced=[VarDef|QualifiedName];
	//
	//	
	//
	//TypeRef:
	//
	//  referenced=[Class|QualifiedName];
	//
	//	
	//
	// * / terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal NUMBER:
	//	"0..9"+ "." "0..9"*;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NL:
	//	"\n\r" | "\n" | "\r" | "\r\n";
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	////terminal OPERATOR : ('+'|'-'|'*'|'/'|'%'|'$'|'<'|'>'|'='|'~'|'!'|'^'|'|'|'&'|':')+;
	//
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
